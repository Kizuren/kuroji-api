model AniZip {
  id Int @id

  // Basic info
  episodeCount Int @map("episode_count")
  specialCount Int @map("special_count")

  // Relationships
  titles   AniZipTitle[]
  images   AniZipImage[]
  episodes AniZipEpisode[]
  mappings AniZipMapping?

  anilist Anilist? @relation(fields: [id], references: [id])

  @@map("anizip")
}

model AniZipTitle {
  id   String  @id @default(cuid())
  key  String // "x-jat", "ja", "en", etc.
  name String?

  // Foreign key to AniZip
  aniZipId Int    @map("anizip_id")
  aniZip   AniZip @relation(fields: [aniZipId], references: [id], onDelete: Cascade)

  @@unique([aniZipId, key]) // Prevent duplicate keys for same anime
  @@map("anizip_titles")
}

model AniZipImage {
  id        String  @id @default(cuid())
  coverType String? @map("cover_type")
  url       String?

  // Foreign key to AniZip
  aniZipId Int    @map("anizip_id")
  aniZip   AniZip @relation(fields: [aniZipId], references: [id], onDelete: Cascade)

  @@map("anizip_images")
}

model AniZipEpisode {
  id String @id @default(cuid())

  // Episode identification
  episodeKey            String? @map("episode_key") // The JSON key like "1", "2", etc
  episodeNumber         Int?    @map("episode_number")
  seasonNumber          Int?    @map("season_number")
  absoluteEpisodeNumber Int?    @map("absolute_episode_number")

  // TVDB info
  tvdbShowId Int? @map("tvdb_show_id")
  tvdbId     Int? @map("tvdb_id")

  // Dates and times
  airDate    String? @map("air_date")
  airDateUtc String? @map("air_date_utc")

  // Media info
  runtime  Int?
  length   Int?
  overview String?
  image    String?
  rating   String?

  // IDs
  episode  String? // string representation of episode number
  anidbEid Int?    @map("anidb_eid")

  // Relationships
  titles   AniZipEpisodeTitle[]
  aniZipId Int                  @map("anizip_id")
  aniZip   AniZip               @relation(fields: [aniZipId], references: [id], onDelete: Cascade)

  @@unique([aniZipId, episodeKey])
  @@map("anizip_episodes")
}

model AniZipEpisodeTitle {
  id   String  @id @default(cuid())
  key  String // "ja", "en", "x-jat", etc.
  name String?

  episodeId String        @map("episode_id")
  episode   AniZipEpisode @relation(fields: [episodeId], references: [id], onDelete: Cascade)

  @@unique([episodeId, key])
  @@map("anizip_episode_titles")
}

model AniZipMapping {
  id String @id @default(cuid())

  animePlanetId String? @map("animeplanet_id")
  kitsuId       String? @map("kitsu_id")
  malId         Int?    @map("mal_id")
  type          String?
  anilistId     Int?    @map("anilist_id")
  anisearchId   Int?    @map("anisearch_id")
  anidbId       Int?    @map("anidb_id")
  notifymoeId   String? @map("notifymoe_id")
  livechartId   Int?    @map("livechart_id")
  thetvdbId     Int?    @map("thetvdb_id")
  imdbId        String? @map("imdb_id")
  themoviedbId  Int?    @map("themoviedb_id")
  anilibriaId   Int?    @map("anilibria_id")
  zoroId        String? @map("zoro_id")
  animepaheId   String? @map("animepahe_id")
  animekaiId    String? @map("animekai_id")

  // One-to-one relationship
  aniZipId Int    @unique @map("anizip_id")
  aniZip   AniZip @relation(fields: [aniZipId], references: [id], onDelete: Cascade)

  @@map("anizip_mappings")
}
