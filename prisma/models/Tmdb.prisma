model Tmdb {
  id                 Int      @id
  adult              Boolean
  backdrop_path      String?
  episode_run_time   Int[]
  media_type         String?
  first_air_date     String?
  homepage           String?
  in_production      Boolean?
  last_air_date      String?
  name               String?
  number_of_episodes Int?
  number_of_seasons  Int?
  original_language  String?
  original_name      String?
  origin_country     String[]
  overview           String?
  popularity         Float?
  poster_path        String?
  tagline            String?
  status             String?
  type               String?
  vote_average       Float?
  vote_count         Int?

  next_episode_to_air TmdbNextEpisodeToAir? @relation("NextEpisode")
  last_episode_to_air TmdbLastEpisodeToAir? @relation("LastEpisode")
  seasons            TmdbReleaseSeason[] @relation("TmdbReleaseSeason")
  episodeSeasons     TmdbSeason[]
  episodes           TmdbSeasonEpisode[]
}

// Add new model for episode info
model TmdbNextEpisodeToAir {
  id              Int      @id
  name            String?
  overview        String?  // @Lob
  vote_average    Float?
  vote_count      Int?
  air_date        String?
  episode_number  Int?
  episode_type    String?
  production_code String?
  runtime         Int?
  season_number   Int?
  show_id         Int? @unique
  still_path      String?

  tmdb_next       Tmdb? @relation("NextEpisode", fields: [show_id], references: [id])

  @@index([show_id])
}

model TmdbLastEpisodeToAir {
  id              Int      @id
  name            String?
  overview        String?  // @Lob
  vote_average    Float?
  vote_count      Int?
  air_date        String?
  episode_number  Int?
  episode_type    String?
  production_code String?
  runtime         Int?
  season_number   Int?
  show_id         Int? @unique
  still_path      String?

  tmdb_last       Tmdb? @relation("LastEpisode", fields: [show_id], references: [id])

  @@index([show_id])
}

model TmdbReleaseSeason {
  id            Int     @id
  air_date      String?
  episode_count Int?
  name          String?
  overview      String? // @Lob
  poster_path   String? // handle URL concatenation in your app logic
  season_number Int
  vote_average  Float?

  tmdb Tmdb[] @relation("TmdbReleaseSeason")
}

model TmdbSeason {
  id            Int      @id
  air_date      String?
  show_id       Int     
  name          String?
  overview      String?  
  poster_path   String?  
  season_number Int
  vote_average  Float?

  show          Tmdb    @relation(fields: [show_id], references: [id])
  episodes      TmdbSeasonEpisode[] @relation("TmdbSeasonEpisode")
}

model TmdbSeasonEpisode {
  id             Int     @id
  air_date       String?
  episode_number Int
  episode_type   String?
  name           String?
  overview       String? 
  production_code String?
  runtime        Int?
  season_number  Int
  show_id        Int
  season_id      Int?
  still_path     String?
  vote_average   Float?
  vote_count     Int?

  show          Tmdb    @relation(map: "TmdbSeasonEpisode_show_fkey", fields: [show_id], references: [id])
  tmdbSeason    TmdbSeason? @relation("TmdbSeasonEpisode", fields: [season_id], references: [id])
  images        TmdbSeasonEpisodeImages?
}

model TmdbSeasonEpisodeImages {
  id      Int @id
  episodeId Int @unique

  stills TmdbSeasonStillImage[] @relation("TmdbSeasonEpisodeStills")
  episode TmdbSeasonEpisode @relation(fields: [episodeId], references: [id])
}

model TmdbSeasonStillImage {
  id Int @id @default(autoincrement())
  aspect_ratio Float?
  height  Int?
  width   Int?
  iso_639_1 String?
  file_path String?
  vote_average   Float?
  vote_count     Int?

  tmdbEpisodeImages TmdbSeasonEpisodeImages @relation("TmdbSeasonEpisodeStills", fields: [episodeImagesId], references: [id])
  episodeImagesId Int
}