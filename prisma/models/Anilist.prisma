model Anilist {
  id                Int      @id
  idMal             Int?
  siteUrl           String?
  bannerImage       String?
  status            String?
  type              String?
  format            String?
  updatedAt         Int?
  description       String?
  season            String?
  seasonYear        Int?
  episodes          Int?
  duration          Int?
  countryOfOrigin   String?
  isLicensed        Boolean?
  source            String?
  hashtag           String?
  moreInfo          String?
  isLocked          Boolean?
  isAdult           Boolean?
  averageScore      Int?
  meanScore         Int?
  score             Int?
  popularity        Int?
  trending          Int?
  favourites        Int?
  genres            String[]
  synonyms          String[]

  // FKs handled in child models
  title             AnilistTitle?          @relation("AnilistTitle")
  coverImage        AnilistCover?          @relation("AnilistCover")
  startDate         StartDate?             @relation("AnilistStartDate")
  endDate           EndDate?               @relation("AnilistEndDate")
  trailer           AnilistTrailer?        @relation("AnilistTrailer")
  nextAiringEpisode AnilistNextAiringEpisode? @relation("AnilistNextAiringEpisode")
  stats             Json?

  // Normalized collections
  recommendations   BasicIdAni[]           @relation("AnilistRecs")
  characters        AnilistCharacter[]     @relation("AnilistCharacters")
  studios           AnilistStudio[]        @relation("AnilistStudios")
  airingSchedule    AnilistAiringSchedule[]@relation("AnilistAiringSchedules")
  tags              AnilistTag[]           @relation("AnilistTags")
  externalLinks     AnilistExternalLink[]  @relation("AnilistExternalLinks")
  streamingEpisodes AnilistStreamingEpisode[] @relation("AnilistStreamingEpisodes")
}

model AnilistTitle {
  id               Int      @id @default(autoincrement())
  releaseId       Int      @unique
  romaji    String?
  english   String?
  native    String?
  anilist   Anilist  @relation("AnilistTitle", fields: [releaseId], references: [id])
}

model StartDate {
  id               Int      @id @default(autoincrement())
  releaseId       Int      @unique
  day       Int?
  month     Int?
  year      Int?
  anilist   Anilist  @relation("AnilistStartDate", fields: [releaseId], references: [id])
}

model EndDate {
  id               Int      @id @default(autoincrement())
  releaseId       Int      @unique
  day       Int?
  month     Int?
  year      Int?
  anilist   Anilist  @relation("AnilistEndDate", fields: [releaseId], references: [id])
}

model AnilistCover {
  id               Int      @id @default(autoincrement())
  releaseId       Int      @unique
  color     String?
  large     String?
  medium    String?
  extraLarge String?
  anilist   Anilist  @relation("AnilistCover", fields: [releaseId], references: [id])
}

model AnilistIndex {
  id        String   @id
  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
}

model AnilistCharacter {
  id          Int      @id @default(autoincrement())
  releaseId   Int
  name        String?
  image       String?  // Store the medium image URL

  anilist     Anilist  @relation("AnilistCharacters", fields: [releaseId], references: [id])
}

model AnilistTag {
  id               Int      @id @default(autoincrement())
  releaseId        Int
  name             String?
  description      String?
  category         String?
  rank             Int?
  isGeneralSpoiler Boolean?
  isMediaSpoiler   Boolean?
  isAdult          Boolean?
  userId           Int?

  anilist          Anilist  @relation("AnilistTags", fields: [releaseId], references: [id])
}

model AnilistExternalLink {
  id         Int      @id @default(autoincrement())
  releaseId  Int
  url        String?
  site       String?
  siteId     Int?
  type       String?
  language   String?
  color      String?
  icon       String?
  notes      String?
  isDisabled Boolean?

  anilist          Anilist  @relation("AnilistExternalLinks", fields: [releaseId], references: [id])
}

model AnilistStreamingEpisode {
  id        Int     @id @default(autoincrement())
  releaseId Int
  title     String?
  thumbnail String?
  url       String?
  site      String?

  anilist          Anilist  @relation("AnilistStreamingEpisodes", fields: [releaseId], references: [id])
}

model AnilistStudio {
  id         Int      @id @default(autoincrement())
  releaseId  Int
  name       String?
  isMain     Boolean?

  anilist    Anilist  @relation("AnilistStudios", fields: [releaseId], references: [id])
}

model AnilistAiringSchedule {
  id              Int      @id @default(autoincrement())
  releaseId       Int
  episode         Int?
  airingAt        Int?
  timeUntilAiring Int?

  anilist         Anilist  @relation("AnilistAiringSchedules", fields: [releaseId], references: [id])
}

model AnilistNextAiringEpisode {
  id              Int      @id @default(autoincrement())
  releaseId       Int      @unique
  episode         Int?
  airingAt        Int?
  timeUntilAiring Int?

  anilist         Anilist  @relation("AnilistNextAiringEpisode", fields: [releaseId], references: [id])
}

model AnilistTrailer {
  id              String   @id @default(uuid())
  releaseId       Int      @unique
  site            String?
  thumbnail       String?

  anilist   Anilist  @relation("AnilistTrailer", fields: [releaseId], references: [id])
}

// model AnilistStats {
//   id                Int           @id @default(autoincrement())
//   releaseId       Int      @unique
//   scoreDistribution AnilistScore? @relation("AnilistScore")
//   anilist         Anilist  @relation("AnilistStats", fields: [releaseId], references: [id])
// }

// model AnilistScore {
//   id       Int             @id @default(autoincrement())
//   anilistStatsId  Int @unique
//   score    Int?
//   amount   Int?
//   anilistStats         AnilistStats  @relation("AnilistScore", fields: [anilistStatsId], references: [id])
// }

model BasicIdAni {
  id        Int      @id
  idMal     Int?

  Anilist Anilist[] @relation("AnilistRecs")
}