model Anilist {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id              Int           @id
  idMal           Int?          @unique
  /// @DtoRelationCanConnectOnCreate
  title           AnilistTitle? @relation("AnilistTitle")
  bannerImage     String?
  status          String?
  type            String?
  format          String?
  /// @DtoRelationCanConnectOnCreate
  coverImage      AnilistCover? @relation("AnilistCover")
  updatedAt       Int?
  description     String?
  /// @DtoRelationCanConnectOnCreate
  startDate       StartDate?    @relation("AnilistStartDate")
  /// @DtoRelationCanConnectOnCreate
  endDate         EndDate?      @relation("AnilistEndDate")
  season          String?
  seasonYear      Int?
  episodes        Int?
  duration        Int?
  countryOfOrigin String?
  isLicensed      Boolean?
  source          String?
  hashtag         String?
  isLocked        Boolean?
  isAdult         Boolean?
  averageScore    Int?
  meanScore       Int?
  score           Int?
  popularity      Int?
  trending        Int?
  favourites      Int?
  genres          String[]
  synonyms        String[]

  /// @DtoRelationCanConnectOnCreate
  trailer AnilistTrailer? @relation("AnilistTrailer")
  /// @DtoRelationCanConnectOnCreate
  latestAiringEpisode AnilistLatestEpisode? @relation("AnilistLatestEpisode")
  /// @DtoRelationCanConnectOnCreate
  nextAiringEpisode   AnilistNextEpisode?   @relation("AnilistNextEpisode")
  /// @DtoRelationCanConnectOnCreate
  lastAiringEpisode   AnilistLastEpisode?   @relation("AnilistLastEpisode")

  // Normalized collections
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  recommendations    BasicIdAni[]                @relation("AnilistRecs")
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  characters         AnilistCharacterEdge[]      @relation("AnilistCharacters")
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  studios            AnilistStudioEdge[]         @relation("AnilistStudios")
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  airingSchedule     AnilistAiringSchedule[]     @relation("AnilistAiringSchedules")
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  tags               AnilistTagEdge[]            @relation("AnilistTags")
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  rankings           AnilistRanking[]            @relation("AnilistRanking")
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  externalLinks      AnilistExternalLink[]       @relation("AnilistExternalLinks")
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  streamingEpisodes  AnilistStreamingEpisode[]   @relation("AnilistStreamingEpisodes")
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  scoreDistribution  AnilistScoreDistribution[]  @relation("AnilistScoreDistribution")
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  statusDistribution AnilistStatusDistribution[] @relation("AnilistStatusDistribution")

  /// @DtoRelationCanConnectOnCreate
  anilibria Anilibria?
  /// @DtoRelationCanConnectOnCreate
  animepahe Animepahe?
  /// @DtoRelationCanConnectOnCreate
  animekai  AnimeKai?
  /// @DtoRelationCanConnectOnCreate
  zoro      Zoro?
  /// @DtoRelationCanConnectOnCreate
  shikimori Shikimori?
  /// @DtoRelationCanConnectOnCreate
  kitsu     Kitsu?
  /// @DtoRelationCanConnectOnCreate
  anizip    AniZip?
}

model AnilistTitle {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id        Int     @id @default(autoincrement())
  anilistId Int     @unique
  romaji    String?
  english   String?
  native    String?
  /// @DtoRelationCanConnectOnCreate
  anilist   Anilist @relation("AnilistTitle", fields: [anilistId], references: [id])
}

model StartDate {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id        Int     @id @default(autoincrement())
  anilistId Int     @unique
  day       Int?
  month     Int?
  year      Int?
  /// @DtoRelationCanConnectOnCreate
  anilist   Anilist @relation("AnilistStartDate", fields: [anilistId], references: [id])
}

model EndDate {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id        Int     @id @default(autoincrement())
  anilistId Int     @unique
  day       Int?
  month     Int?
  year      Int?
  /// @DtoRelationCanConnectOnCreate
  anilist   Anilist @relation("AnilistEndDate", fields: [anilistId], references: [id])
}

model AnilistCover {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id         Int     @id @default(autoincrement())
  anilistId  Int     @unique
  color      String?
  large      String?
  medium     String?
  extraLarge String?
  /// @DtoRelationCanConnectOnCreate
  anilist    Anilist @relation("AnilistCover", fields: [anilistId], references: [id])
}

model AnilistIndex {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id        String   @id
  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
}

// model AnilistView {
//   id        Int      @id @default(autoincrement())
//   anilistId Int
//   ipAddress String?
//   userAgent String?
//   viewedAt  DateTime @default(now())

//   anilist Anilist @relation("AnilistViews", fields: [anilistId], references: [id])

//   @@index([anilistId, viewedAt])
//   @@index([viewedAt])
// }

// model AnilistEpisodeView {
//   id        Int      @id @default(autoincrement())
//   anilistId Int
//   episode   Int
//   provider  String
//   ipAddress String?
//   userAgent String?
//   viewedAt  DateTime @default(now())

//   anilist Anilist @relation("AnilistEpisodeViews", fields: [anilistId], references: [id])

//   @@index([anilistId, viewedAt])
//   @@index([viewedAt])
// }

model AnilistCharacterEdge {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id          Int     @id
  anilistId   Int
  characterId Int
  role        String?

  /// @DtoRelationCanConnectOnCreate
  anilist     Anilist          @relation("AnilistCharacters", fields: [anilistId], references: [id])
  /// @DtoRelationCanConnectOnCreate
  character   AnilistCharacter @relation(fields: [characterId], references: [id])
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  voiceActors VoiceActor[]     @relation("CharacterVoiceActors")
}

model AnilistCharacter {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id Int @id

  /// @DtoRelationCanConnectOnCreate
  name  AnilistCharacterName?  @relation("CharacterName")
  /// @DtoRelationCanConnectOnCreate
  image AnilistCharacterImage? @relation("CharacterImage")
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  animeLinks AnilistCharacterEdge[]
}

model VoiceActor {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id       Int     @id
  language String?

  /// @DtoRelationCanConnectOnCreate
  name  AnilistVoiceName?  @relation("VoiceActorName")
  /// @DtoRelationCanConnectOnCreate
  image AnilistVoiceImage? @relation("VoiceActorImage")
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  characters AnilistCharacterEdge[] @relation("CharacterVoiceActors")
}

model AnilistCharacterName {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id          Int      @id @default(autoincrement())
  full        String?
  native      String?
  alternative String[]

  /// @DtoRelationCanConnectOnCreate
  character   AnilistCharacter? @relation("CharacterName", fields: [characterId], references: [id])
  characterId Int?              @unique
}

model AnilistCharacterImage {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id     Int     @id @default(autoincrement())
  large  String?
  medium String?

  /// @DtoRelationCanConnectOnCreate
  character   AnilistCharacter? @relation("CharacterImage", fields: [characterId], references: [id])
  characterId Int?              @unique
}

model AnilistVoiceName {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id          Int      @id @default(autoincrement())
  full        String?
  native      String?
  alternative String[]

  /// @DtoRelationCanConnectOnCreate
  voiceActor   VoiceActor? @relation("VoiceActorName", fields: [voiceActorId], references: [id])
  voiceActorId Int?        @unique
}

model AnilistVoiceImage {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id     Int     @id @default(autoincrement())
  large  String?
  medium String?

  /// @DtoRelationCanConnectOnCreate
  voiceActor   VoiceActor? @relation("VoiceActorImage", fields: [voiceActorId], references: [id])
  voiceActorId Int?        @unique
}

model AnilistTagEdge {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id             Int      @id @default(autoincrement())
  anilistId      Int
  tagId          Int
  rank           Int?
  isMediaSpoiler Boolean?

  /// @DtoRelationCanConnectOnCreate
  anilist Anilist    @relation("AnilistTags", fields: [anilistId], references: [id])
  /// @DtoRelationCanConnectOnCreate
  tag     AnilistTag @relation("AnilistTagEdges", fields: [tagId], references: [id])

  @@unique([anilistId, tagId])
}

model AnilistTag {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id               Int      @id
  name             String?  @unique
  description      String?
  category         String?
  isGeneralSpoiler Boolean?
  isAdult          Boolean?

  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  tagEdges AnilistTagEdge[] @relation("AnilistTagEdges")
}

model AnilistExternalLink {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id         Int      @id
  anilistId  Int
  url        String?
  site       String?
  siteId     Int?
  type       String?
  language   String?
  color      String?
  icon       String?
  notes      String?
  isDisabled Boolean?

  /// @DtoRelationCanConnectOnCreate
  anilist Anilist @relation("AnilistExternalLinks", fields: [anilistId], references: [id])
}

model AnilistStreamingEpisode {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id        Int     @id @default(autoincrement())
  anilistId Int
  title     String?
  thumbnail String?
  url       String?
  site      String?

  /// @DtoRelationCanConnectOnCreate
  anilist Anilist @relation("AnilistStreamingEpisodes", fields: [anilistId], references: [id])
}

model AnilistStudioEdge {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id        Int      @id
  anilistId Int
  studioId  Int
  isMain    Boolean?

  /// @DtoRelationCanConnectOnCreate
  anilist Anilist       @relation("AnilistStudios", fields: [anilistId], references: [id])
  /// @DtoRelationCanConnectOnCreate
  studio  AnilistStudio @relation(fields: [studioId], references: [id])
}

model AnilistStudio {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id   Int     @id
  name String?

  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  animeLinks AnilistStudioEdge[]
}

model AnilistAiringSchedule {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id        Int  @id
  anilistId Int
  episode   Int?
  airingAt  Int?

  /// @DtoRelationCanConnectOnCreate
  anilist Anilist @relation("AnilistAiringSchedules", fields: [anilistId], references: [id])
}

model AnilistLatestEpisode {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id        Int  @id
  anilistId Int  @unique
  episode   Int?
  airingAt  Int?

  /// @DtoRelationCanConnectOnCreate
  anilist Anilist @relation("AnilistLatestEpisode", fields: [anilistId], references: [id])
}

model AnilistNextEpisode {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id        Int  @id
  anilistId Int  @unique
  episode   Int?
  airingAt  Int?

  /// @DtoRelationCanConnectOnCreate
  anilist Anilist @relation("AnilistNextEpisode", fields: [anilistId], references: [id])
}

model AnilistLastEpisode {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id        Int  @id
  anilistId Int  @unique
  episode   Int?
  airingAt  Int?

  /// @DtoRelationCanConnectOnCreate
  anilist Anilist @relation("AnilistLastEpisode", fields: [anilistId], references: [id])
}

model AnilistRanking {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id        Int      @id
  anilistId Int
  rank      Int?
  type      String?
  format    String?
  year      Int?
  season    String?
  allTime   Boolean?
  context   String

  /// @DtoRelationCanConnectOnCreate
  anilist Anilist @relation("AnilistRanking", fields: [anilistId], references: [id])
}

model AnilistTrailer {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id        String  @id @default(uuid())
  anilistId Int     @unique
  site      String?
  thumbnail String?

  /// @DtoRelationCanConnectOnCreate
  anilist Anilist @relation("AnilistTrailer", fields: [anilistId], references: [id])
}

model AnilistScoreDistribution {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id        Int     @id @default(autoincrement())
  score     Int
  amount    Int
  anilistId Int
  /// @DtoRelationCanConnectOnCreate
  anilist   Anilist @relation("AnilistScoreDistribution", fields: [anilistId], references: [id])
}

model AnilistStatusDistribution {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id        Int     @id @default(autoincrement())
  status    String
  amount    Int
  anilistId Int
  /// @DtoRelationCanConnectOnCreate
  anilist   Anilist @relation("AnilistStatusDistribution", fields: [anilistId], references: [id])
}

model BasicIdAni {
  /// @DtoReadOnly
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  id    Int  @id
  idMal Int?

  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanConnectOnCreate
  Anilist Anilist[] @relation("AnilistRecs")
}
