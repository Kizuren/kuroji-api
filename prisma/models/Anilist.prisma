model Anilist {
  id              Int           @id
  idMal           Int?          @unique
  title           AnilistTitle? @relation("AnilistTitle")
  bannerImage     String?
  status          String?
  type            String?
  format          String?
  coverImage      AnilistCover? @relation("AnilistCover")
  updatedAt       Int?
  description     String?
  startDate       StartDate?    @relation("AnilistStartDate")
  endDate         EndDate?      @relation("AnilistEndDate")
  season          String?
  seasonYear      Int?
  episodes        Int?
  duration        Int?
  countryOfOrigin String?
  isLicensed      Boolean?
  source          String?
  hashtag         String?
  moreInfo        String?
  isLocked        Boolean?
  isAdult         Boolean?
  averageScore    Int?
  meanScore       Int?
  score           Int?
  popularity      Int?
  trending        Int?
  favourites      Int?
  genres          String[]
  synonyms        String[]

  trailer           AnilistTrailer?           @relation("AnilistTrailer")
  nextAiringEpisode AnilistNextAiringEpisode? @relation("AnilistNextAiringEpisode")

  // Normalized collections
  recommendations    BasicIdAni[]                @relation("AnilistRecs")
  characters         AnilistCharacterEdge[]      @relation("AnilistCharacters")
  studios            AnilistStudioEdge[]         @relation("AnilistStudios")
  airingSchedule     AnilistAiringSchedule[]     @relation("AnilistAiringSchedules")
  tags               AnilistTag[]                @relation("AnilistTags")
  rankings           AnilistRanking[]            @relation("AnilistRanking")
  externalLinks      AnilistExternalLink[]       @relation("AnilistExternalLinks")
  streamingEpisodes  AnilistStreamingEpisode[]   @relation("AnilistStreamingEpisodes")
  scoreDistribution  AnilistScoreDistribution[]  @relation("AnilistScoreDistribution")
  statusDistribution AnilistStatusDistribution[] @relation("AnilistStatusDistribution")
  
  // New relations for promo and music videos
  promoVideos        AnilistPromoVideo[]         @relation("AnilistPromoVideos")
  musicVideos        AnilistMusicVideo[]         @relation("AnilistMusicVideos")
  
  // Jikan episodes
  jikanEpisodes      AnilistJikanEpisode[]       @relation("AnilistJikanEpisodes")

  animepahe          Animepahe?
  animekai           AnimeKai?
  zoro               Zoro?
  shikimori          Shikimori?
}

model AnilistTitle {
  id        Int     @id @default(autoincrement())
  anilistId Int     @unique
  romaji    String?
  english   String?
  native    String?
  anilist   Anilist @relation("AnilistTitle", fields: [anilistId], references: [id])
}

model StartDate {
  id        Int     @id @default(autoincrement())
  anilistId Int     @unique
  day       Int?
  month     Int?
  year      Int?
  anilist   Anilist @relation("AnilistStartDate", fields: [anilistId], references: [id])
}

model EndDate {
  id        Int     @id @default(autoincrement())
  anilistId Int     @unique
  day       Int?
  month     Int?
  year      Int?
  anilist   Anilist @relation("AnilistEndDate", fields: [anilistId], references: [id])
}

model AnilistCover {
  id         Int     @id @default(autoincrement())
  anilistId  Int     @unique
  color      String?
  large      String?
  medium     String?
  extraLarge String?
  anilist    Anilist @relation("AnilistCover", fields: [anilistId], references: [id])
}

model AnilistIndex {
  id        String   @id
  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
}

model AnilistCharacterEdge {
  id          Int     @id
  anilistId   Int
  characterId Int
  role        String?

  anilist   Anilist          @relation("AnilistCharacters", fields: [anilistId], references: [id])
  character AnilistCharacter @relation(fields: [characterId], references: [id])
  voiceActors VoiceActor[]   @relation("CharacterVoiceActors")
}

model AnilistCharacter {
  id Int @id

  name  AnilistCharacterName?  @relation("CharacterName")
  image AnilistCharacterImage? @relation("CharacterImage")

  animeLinks  AnilistCharacterEdge[]
}

model VoiceActor {
  id       Int     @id
  language String?

  name  AnilistVoiceName?  @relation("VoiceActorName")
  image AnilistVoiceImage? @relation("VoiceActorImage")

  characters AnilistCharacterEdge[] @relation("CharacterVoiceActors")
}

model AnilistCharacterName {
  id          Int      @id @default(autoincrement())
  full        String?
  native      String?
  alternative String[]

  character   AnilistCharacter? @relation("CharacterName", fields: [characterId], references: [id])
  characterId Int?              @unique
}

model AnilistCharacterImage {
  id     Int     @id @default(autoincrement())
  large  String?
  medium String?

  character   AnilistCharacter? @relation("CharacterImage", fields: [characterId], references: [id])
  characterId Int?              @unique
}

model AnilistVoiceName {
  id          Int      @id @default(autoincrement())
  full        String?
  native      String?
  alternative String[]

  voiceActor   VoiceActor? @relation("VoiceActorName", fields: [voiceActorId], references: [id])
  voiceActorId Int?        @unique
}

model AnilistVoiceImage {
  id     Int     @id @default(autoincrement())
  large  String?
  medium String?

  voiceActor   VoiceActor? @relation("VoiceActorImage", fields: [voiceActorId], references: [id])
  voiceActorId Int?        @unique
}

model AnilistTag {
  id               Int      @id
  anilistId        Int
  name             String?  @unique
  description      String?
  category         String?
  rank             Int?
  isSpoiler        Boolean?
  isAdult          Boolean?

  anilist Anilist @relation("AnilistTags", fields: [anilistId], references: [id])
}

model AnilistExternalLink {
  id         Int      @id
  anilistId  Int
  url        String?
  site       String?
  siteId     Int?
  type       String?
  language   String?
  color      String?
  icon       String?
  notes      String?
  isDisabled Boolean?

  anilist Anilist @relation("AnilistExternalLinks", fields: [anilistId], references: [id])
}

model AnilistStreamingEpisode {
  id        Int     @id @default(autoincrement())
  anilistId Int
  title     String?
  thumbnail String?
  url       String?
  site      String?

  anilist Anilist @relation("AnilistStreamingEpisodes", fields: [anilistId], references: [id])
}

model AnilistStudioEdge {
  id        Int      @id
  anilistId Int
  studioId  Int
  isMain    Boolean?

  anilist Anilist       @relation("AnilistStudios", fields: [anilistId], references: [id])
  studio  AnilistStudio @relation(fields: [studioId], references: [id])
}

model AnilistStudio {
  id   Int     @id
  name String?

  animeLinks AnilistStudioEdge[]
}

model AnilistAiringSchedule {
  id              Int  @id
  anilistId       Int
  episode         Int?
  airingAt        Int?
  timeUntilAiring Int?

  anilist Anilist @relation("AnilistAiringSchedules", fields: [anilistId], references: [id])
}

model AnilistNextAiringEpisode {
  id              Int  @id
  anilistId       Int  @unique
  episode         Int?
  airingAt        Int?
  timeUntilAiring Int?

  anilist Anilist @relation("AnilistNextAiringEpisode", fields: [anilistId], references: [id])
}

model AnilistRanking {
  id        Int      @id
  anilistId Int
  rank      Int?
  type      String?
  format    String?
  year      Int?
  season    String?
  allTime   Boolean?
  context   String

  anilist Anilist @relation("AnilistRanking", fields: [anilistId], references: [id])
}

model AnilistTrailer {
  id        String  @id @default(uuid())
  anilistId Int     @unique
  site      String?
  thumbnail String?

  anilist Anilist @relation("AnilistTrailer", fields: [anilistId], references: [id])
}

model AnilistScoreDistribution {
  id        Int     @id @default(autoincrement())
  score     Int
  amount    Int
  anilistId Int
  anilist   Anilist @relation("AnilistScoreDistribution", fields: [anilistId], references: [id])
}

model AnilistStatusDistribution {
  id        Int     @id @default(autoincrement())
  status    String
  amount    Int
  anilistId Int
  anilist   Anilist @relation("AnilistStatusDistribution", fields: [anilistId], references: [id])
}

model BasicIdAni {
  id    Int  @id
  idMal Int?

  Anilist Anilist[] @relation("AnilistRecs")
}

// New models for promotional videos
model AnilistPromoVideo {
  anilistId   Int
  title       String?
  youtubeId   String  @id @unique
  url         String?
  embedUrl    String?
  
  // Video images
  images      AnilistVideoImages?
  
  anilist     Anilist  @relation("AnilistPromoVideos", fields: [anilistId], references: [id])
}

model AnilistMusicVideo {
  anilistId   Int
  title       String?
  youtubeId   String  @id @unique
  url         String?
  embedUrl    String?
  
  // Video images
  images      AnilistVideoImages?
  
  // Metadata
  meta        AnilistVideoMeta?
  
  anilist     Anilist  @relation("AnilistMusicVideos", fields: [anilistId], references: [id])
}

model AnilistVideoImages {
  id              Int     @id @default(autoincrement())
  imageUrl        String?
  smallImageUrl   String?
  mediumImageUrl  String?
  largeImageUrl   String?
  maximumImageUrl String?
  
  // Relations to parent videos
  promoVideo      AnilistPromoVideo? @relation(fields: [promoVideoYoutubeId], references: [youtubeId])
  promoVideoYoutubeId  String?      @unique
  
  musicVideo      AnilistMusicVideo? @relation(fields: [musicVideoYoutubeId], references: [youtubeId]) 
  musicVideoYoutubeId  String?      @unique
}

model AnilistVideoMeta {
  id          Int     @id @default(autoincrement())
  title       String?
  author      String?
  
  // Relation to parent music video
  musicVideo   AnilistMusicVideo @relation(fields: [musicVideoYoutubeId], references: [youtubeId])
  musicVideoYoutubeId String    @unique
}

// Model for Jikan Episodes
model AnilistJikanEpisode {
  id          Int      @id @default(autoincrement())
  anilistId   Int
  malId       Int?
  url         String?
  title       String?
  episode     String?
  imageUrl    String?
  
  anilist     Anilist  @relation("AnilistJikanEpisodes", fields: [anilistId], references: [id])
}