model Anilibria {
  id                         Int      @id
  anilistId                  Int?     @unique
  year                       Int?
  alias                      String?  @unique
  freshAt                    String?
  createdAt                  String?
  updatedAt                  String?
  isOngoing                  Boolean?
  publishDay                 Int?
  description                String?
  notification               String?
  episodesTotal              Int?
  externalPlayer             String?
  isInProduction             Boolean?
  isBlockedByGeo             Boolean?
  isBlockedByCopyrights      Boolean?
  addedInUsersFavorites      Int?
  averageDurationOfEpisode   Int?
  addedInPlannedCollection   Int?
  addedInWatchedCollection   Int?
  addedInWatchingCollection  Int?
  addedInPostponedCollection Int?
  addedInAbandonedCollection Int?

  // Normalized relations
  type      AnilibriaType?      @relation("AnilibriaType")
  name      AnilibriaName?      @relation("AnilibriaName")
  season    AnilibriaSeason?    @relation("AnilibriaSeason")
  poster    AnilibriaPoster?    @relation("AnilibriaPoster")
  ageRating AnilibriaAgeRating? @relation("AnilibriaAgeRating")
  sponsor   AnilibriaSponsor?   @relation("AnilibriaSponsor")

  // Collections
  genres   AnilibriaGenreEdge[]  @relation("AnilibriaGenres")
  members  AnilibriaMemberEdge[] @relation("AnilibriaMembers")
  episodes AnilibriaEpisode[]    @relation("AnilibriaEpisodes")
  torrents AnilibriaTorrent[]    @relation("AnilibriaTorrents")

  anilist Anilist? @relation(fields: [anilistId], references: [id])
}

model AnilibriaType {
  id          Int     @id @default(autoincrement())
  anilibriaId Int     @unique
  value       String?
  description String?

  anilibria Anilibria @relation("AnilibriaType", fields: [anilibriaId], references: [id])
}

model AnilibriaName {
  id          Int     @id @default(autoincrement())
  anilibriaId Int     @unique
  main        String?
  english     String?
  alternative String?

  anilibria Anilibria @relation("AnilibriaName", fields: [anilibriaId], references: [id])
}

model AnilibriaSeason {
  id          Int     @id @default(autoincrement())
  anilibriaId Int     @unique
  value       String?
  description String?

  anilibria Anilibria @relation("AnilibriaSeason", fields: [anilibriaId], references: [id])
}

model AnilibriaPoster {
  id                 Int     @id @default(autoincrement())
  anilibriaId        Int     @unique
  preview            String?
  thumbnail          String?
  optimizedPreview   String?
  optimizedThumbnail String?

  anilibria Anilibria @relation("AnilibriaPoster", fields: [anilibriaId], references: [id])
}

model AnilibriaAgeRating {
  id          Int      @id @default(autoincrement())
  anilibriaId Int      @unique
  value       String?
  label       String?
  isAdult     Boolean?
  description String?

  anilibria Anilibria @relation("AnilibriaAgeRating", fields: [anilibriaId], references: [id])
}

model AnilibriaSponsor {
  id          Int     @id @default(autoincrement())
  anilibriaId Int     @unique
  sponsorId   String?
  title       String?
  description String?
  urlTitle    String?
  url         String?

  anilibria Anilibria @relation("AnilibriaSponsor", fields: [anilibriaId], references: [id])
}

model AnilibriaGenreEdge {
  id            Int  @id @default(autoincrement())
  anilibriaId   Int
  genreId       Int
  totalReleases Int?

  anilibria Anilibria      @relation("AnilibriaGenres", fields: [anilibriaId], references: [id])
  genre     AnilibriaGenre @relation(fields: [genreId], references: [id])
}

model AnilibriaGenre {
  id                 Int     @id
  name               String?
  preview            String?
  thumbnail          String?
  optimizedPreview   String?
  optimizedThumbnail String?

  genreEdges AnilibriaGenreEdge[]
}

model AnilibriaMemberEdge {
  id          Int     @id @default(autoincrement())
  anilibriaId Int
  memberId    String
  nickname    String?

  anilibria Anilibria       @relation("AnilibriaMembers", fields: [anilibriaId], references: [id])
  member    AnilibriaMember @relation(fields: [memberId], references: [id])
}

model AnilibriaMember {
  id String @id

  role AnilibriaMemberRole? @relation("AnilibriaMemberRole")
  user AnilibriaMemberUser? @relation("AnilibriaMemberUser")

  memberEdges AnilibriaMemberEdge[]
}

model AnilibriaMemberRole {
  id          Int     @id @default(autoincrement())
  memberId    String  @unique
  value       String?
  description String?

  member AnilibriaMember @relation("AnilibriaMemberRole", fields: [memberId], references: [id])
}

model AnilibriaMemberUser {
  id                 Int     @id @default(autoincrement())
  memberId           String  @unique
  userId             Int?
  preview            String?
  thumbnail          String?
  optimizedPreview   String?
  optimizedThumbnail String?

  member AnilibriaMember @relation("AnilibriaMemberUser", fields: [memberId], references: [id])
}

model AnilibriaEpisode {
  id          String  @id
  anilibriaId Int
  name        String?
  nameEnglish String?
  ordinal     Float?
  duration    Int?
  rutubeId    String?
  youtubeId   String?
  updatedAt   String?
  sortOrder   Int?
  releaseId   Int?
  hls480      String?
  hls720      String?
  hls1080     String?

  anilibria Anilibria                @relation("AnilibriaEpisodes", fields: [anilibriaId], references: [id])
  ending    AnilibriaEpisodeEnding?  @relation("AnilibriaEpisodeEnding")
  opening   AnilibriaEpisodeOpening? @relation("AnilibriaEpisodeOpening")
  preview   AnilibriaEpisodePreview? @relation("AnilibriaEpisodePreview")
}

model AnilibriaEpisodeEnding {
  id        Int    @id @default(autoincrement())
  episodeId String @unique
  start     Int?
  stop      Int?

  episode AnilibriaEpisode @relation("AnilibriaEpisodeEnding", fields: [episodeId], references: [id])
}

model AnilibriaEpisodeOpening {
  id        Int    @id @default(autoincrement())
  episodeId String @unique
  start     Int?
  stop      Int?

  episode AnilibriaEpisode @relation("AnilibriaEpisodeOpening", fields: [episodeId], references: [id])
}

model AnilibriaEpisodePreview {
  id                 Int     @id @default(autoincrement())
  episodeId          String  @unique
  preview            String?
  thumbnail          String?
  optimizedPreview   String?
  optimizedThumbnail String?

  episode AnilibriaEpisode @relation("AnilibriaEpisodePreview", fields: [episodeId], references: [id])
}

model AnilibriaTorrent {
  id             Int      @id
  anilibriaId    Int
  hash           String?
  size           BigInt?
  label          String?
  magnet         String?
  filename       String?
  seeders        Int?
  bitrate        Int?
  leechers       Int?
  sortOrder      Int?
  updatedAt      String?
  isHardsub      Boolean?
  description    String?
  createdAt      String?
  completedTimes Int?

  anilibria Anilibria                @relation("AnilibriaTorrents", fields: [anilibriaId], references: [id])
  type      AnilibriaTorrentType?    @relation("AnilibriaTorrentType")
  color     AnilibriaTorrentColor?   @relation("AnilibriaTorrentColor")
  codec     AnilibriaTorrentCodec?   @relation("AnilibriaTorrentCodec")
  quality   AnilibriaTorrentQuality? @relation("AnilibriaTorrentQuality")
}

model AnilibriaTorrentType {
  id          Int     @id @default(autoincrement())
  torrentId   Int     @unique
  value       String?
  description String?

  torrent AnilibriaTorrent @relation("AnilibriaTorrentType", fields: [torrentId], references: [id])
}

model AnilibriaTorrentColor {
  id          Int     @id @default(autoincrement())
  torrentId   Int     @unique
  value       String?
  description String?

  torrent AnilibriaTorrent @relation("AnilibriaTorrentColor", fields: [torrentId], references: [id])
}

model AnilibriaTorrentCodec {
  id             Int      @id @default(autoincrement())
  torrentId      Int      @unique
  value          String?
  label          String?
  description    String?
  labelColor     String?
  labelIsVisible Boolean?

  torrent AnilibriaTorrent @relation("AnilibriaTorrentCodec", fields: [torrentId], references: [id])
}

model AnilibriaTorrentQuality {
  id          Int     @id @default(autoincrement())
  torrentId   Int     @unique
  value       String?
  description String?

  torrent AnilibriaTorrent @relation("AnilibriaTorrentQuality", fields: [torrentId], references: [id])
}
