model Anilibria {
  id                            Int      @id
  anilist_id                    Int?     @unique
  year                          Int?
  alias                         String?  @unique
  fresh_at                      String?
  created_at                    String?
  updated_at                    String?
  is_ongoing                    Boolean?
  description                   String?
  notification                  String?
  episodes_total                Int?
  external_player               String?
  is_in_production              Boolean?
  is_blocked_by_copyrights      Boolean?
  added_in_users_favorites      Int?
  average_duration_of_episode   Int?
  added_in_planned_collection   Int?
  added_in_watched_collection   Int?
  added_in_watching_collection  Int?
  added_in_postponed_collection Int?
  added_in_abandoned_collection Int?

  // Normalized relations
  type        AnilibriaType?       @relation("AnilibriaType")
  name        AnilibriaName?       @relation("AnilibriaName")
  season      AnilibriaSeason?     @relation("AnilibriaSeason")
  poster      AnilibriaPoster?     @relation("AnilibriaPoster")
  age_rating  AnilibriaAgeRating?  @relation("AnilibriaAgeRating")
  sponsor     AnilibriaSponsor?    @relation("AnilibriaSponsor")
  publish_day AnilibriaPublishDay? @relation("AnilibriaPublishDay")

  // Collections
  genres   AnilibriaGenreEdge[] @relation("AnilibriaGenres")
  episodes AnilibriaEpisode[]   @relation("AnilibriaEpisodes")
  torrents AnilibriaTorrent[]   @relation("AnilibriaTorrents")

  anilist Anilist? @relation(fields: [anilist_id], references: [id])
}

model AnilibriaPublishDay {
  id          Int     @id @default(autoincrement())
  anilibriaId Int     @unique
  value       Int?
  description String?

  anilibria Anilibria @relation("AnilibriaPublishDay", fields: [anilibriaId], references: [id])
}

model AnilibriaType {
  id          Int     @id @default(autoincrement())
  anilibriaId Int     @unique
  value       String?
  description String?

  anilibria Anilibria @relation("AnilibriaType", fields: [anilibriaId], references: [id])
}

model AnilibriaName {
  id          Int     @id @default(autoincrement())
  anilibriaId Int     @unique
  main        String?
  english     String?
  alternative String?

  anilibria Anilibria @relation("AnilibriaName", fields: [anilibriaId], references: [id])
}

model AnilibriaSeason {
  id          Int     @id @default(autoincrement())
  anilibriaId Int     @unique
  value       String?
  description String?

  anilibria Anilibria @relation("AnilibriaSeason", fields: [anilibriaId], references: [id])
}

model AnilibriaPoster {
  id                  Int     @id @default(autoincrement())
  anilibriaId         Int     @unique
  preview             String?
  thumbnail           String?
  optimized_preview   String?
  optimized_thumbnail String?

  anilibria Anilibria @relation("AnilibriaPoster", fields: [anilibriaId], references: [id])
}

model AnilibriaAgeRating {
  id          Int      @id @default(autoincrement())
  anilibriaId Int      @unique
  value       String?
  label       String?
  is_adult    Boolean?
  description String?

  anilibria Anilibria @relation("AnilibriaAgeRating", fields: [anilibriaId], references: [id])
}

model AnilibriaSponsor {
  id          String  @id
  anilibriaId Int     @unique
  title       String?
  description String?
  url_title   String?
  url         String?

  anilibria Anilibria @relation("AnilibriaSponsor", fields: [anilibriaId], references: [id])
}

model AnilibriaGenreEdge {
  id             Int  @id @default(autoincrement())
  anilibriaId    Int
  genreId        Int
  total_releases Int?

  anilibria Anilibria      @relation("AnilibriaGenres", fields: [anilibriaId], references: [id])
  genre     AnilibriaGenre @relation(fields: [genreId], references: [id])
}

model AnilibriaGenre {
  id                  Int     @id
  name                String?
  preview             String?
  thumbnail           String?
  optimized_preview   String?
  optimized_thumbnail String?

  genreEdges AnilibriaGenreEdge[]
}

model AnilibriaEpisode {
  id           String  @id
  anilibriaId  Int
  name         String?
  name_english String?
  ordinal      Float?
  duration     Int?
  rutube_id    String?
  youtube_id   String?
  updated_at   String?
  sort_order   Int?
  release_id   Int?
  hls_480      String?
  hls_720      String?
  hls_1080     String?

  anilibria Anilibria                @relation("AnilibriaEpisodes", fields: [anilibriaId], references: [id])
  ending    AnilibriaEpisodeEnding?  @relation("AnilibriaEpisodeEnding")
  opening   AnilibriaEpisodeOpening? @relation("AnilibriaEpisodeOpening")
  preview   AnilibriaEpisodePreview? @relation("AnilibriaEpisodePreview")
}

model AnilibriaEpisodeEnding {
  id        Int    @id @default(autoincrement())
  episodeId String @unique
  start     Int?
  stop      Int?

  episode AnilibriaEpisode @relation("AnilibriaEpisodeEnding", fields: [episodeId], references: [id])
}

model AnilibriaEpisodeOpening {
  id        Int    @id @default(autoincrement())
  episodeId String @unique
  start     Int?
  stop      Int?

  episode AnilibriaEpisode @relation("AnilibriaEpisodeOpening", fields: [episodeId], references: [id])
}

model AnilibriaEpisodePreview {
  id                  Int     @id @default(autoincrement())
  episodeId           String  @unique
  preview             String?
  thumbnail           String?
  optimized_preview   String?
  optimized_thumbnail String?

  episode AnilibriaEpisode @relation("AnilibriaEpisodePreview", fields: [episodeId], references: [id])
}

model AnilibriaTorrent {
  id              Int      @id
  anilibriaId     Int
  hash            String?
  size            BigInt?
  label           String?
  magnet          String?
  filename        String?
  seeders         Int?
  bitrate         Int?
  leechers        Int?
  sort_order      Int?
  updated_at      String?
  is_hardsub      Boolean?
  description     String?
  created_at      String?
  completed_times Int?

  anilibria Anilibria                @relation("AnilibriaTorrents", fields: [anilibriaId], references: [id])
  type      AnilibriaTorrentType?    @relation("AnilibriaTorrentType")
  color     AnilibriaTorrentColor?   @relation("AnilibriaTorrentColor")
  codec     AnilibriaTorrentCodec?   @relation("AnilibriaTorrentCodec")
  quality   AnilibriaTorrentQuality? @relation("AnilibriaTorrentQuality")
}

model AnilibriaTorrentType {
  id          Int     @id @default(autoincrement())
  torrentId   Int     @unique
  value       String?
  description String?

  torrent AnilibriaTorrent @relation("AnilibriaTorrentType", fields: [torrentId], references: [id])
}

model AnilibriaTorrentColor {
  id          Int     @id @default(autoincrement())
  torrentId   Int     @unique
  value       String?
  description String?

  torrent AnilibriaTorrent @relation("AnilibriaTorrentColor", fields: [torrentId], references: [id])
}

model AnilibriaTorrentCodec {
  id               Int      @id @default(autoincrement())
  torrentId        Int      @unique
  value            String?
  label            String?
  description      String?
  label_color      String?
  label_is_visible Boolean?

  torrent AnilibriaTorrent @relation("AnilibriaTorrentCodec", fields: [torrentId], references: [id])
}

model AnilibriaTorrentQuality {
  id          Int     @id @default(autoincrement())
  torrentId   Int     @unique
  value       String?
  description String?

  torrent AnilibriaTorrent @relation("AnilibriaTorrentQuality", fields: [torrentId], references: [id])
}
