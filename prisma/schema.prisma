generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Anilist.prisma
model Anilist {
  id              Int           @id
  idMal           Int?
  title           AnilistTitle? @relation("AnilistTitle")
  bannerImage     String?
  status          String?
  type            String?
  format          String?
  coverImage      AnilistCover? @relation("AnilistCover")
  updatedAt       Int?
  description     String?
  startDate       StartDate?    @relation("AnilistStartDate")
  endDate         EndDate?      @relation("AnilistEndDate")
  season          String?
  seasonYear      Int?
  episodes        Int?
  duration        Int?
  countryOfOrigin String?
  isLicensed      Boolean?
  source          String?
  hashtag         String?
  moreInfo        String?
  isLocked        Boolean?
  isAdult         Boolean?
  averageScore    Int?
  meanScore       Int?
  score           Int?
  popularity      Int?
  trending        Int?
  favourites      Int?
  genres          String[]
  synonyms        String[]

  trailer           AnilistTrailer?           @relation("AnilistTrailer")
  nextAiringEpisode AnilistNextAiringEpisode? @relation("AnilistNextAiringEpisode")

  // Normalized collections
  recommendations    BasicIdAni[]                @relation("AnilistRecs")
  characters         AnilistCharacterEdge[]      @relation("AnilistCharacters")
  studios            AnilistStudioEdge[]         @relation("AnilistStudios")
  airingSchedule     AnilistAiringSchedule[]     @relation("AnilistAiringSchedules")
  tags               AnilistTag[]                @relation("AnilistTags")
  rankings           AnilistRanking[]            @relation("AnilistRanking")
  externalLinks      AnilistExternalLink[]       @relation("AnilistExternalLinks")
  streamingEpisodes  AnilistStreamingEpisode[]   @relation("AnilistStreamingEpisodes")
  scoreDistribution  AnilistScoreDistribution[]  @relation("AnilistScoreDistribution")
  statusDistribution AnilistStatusDistribution[] @relation("AnilistStatusDistribution")
  
  // New relations for promo and music videos
  promoVideos        AnilistPromoVideo[]         @relation("AnilistPromoVideos")
  musicVideos        AnilistMusicVideo[]         @relation("AnilistMusicVideos")
  
  // Jikan episodes
  jikanEpisodes      AnilistJikanEpisode[]       @relation("AnilistJikanEpisodes")
}

model AnilistTitle {
  id        Int     @id @default(autoincrement())
  anilistId Int     @unique
  romaji    String?
  english   String?
  native    String?
  anilist   Anilist @relation("AnilistTitle", fields: [anilistId], references: [id])
}

model StartDate {
  id        Int     @id @default(autoincrement())
  anilistId Int     @unique
  day       Int?
  month     Int?
  year      Int?
  anilist   Anilist @relation("AnilistStartDate", fields: [anilistId], references: [id])
}

model EndDate {
  id        Int     @id @default(autoincrement())
  anilistId Int     @unique
  day       Int?
  month     Int?
  year      Int?
  anilist   Anilist @relation("AnilistEndDate", fields: [anilistId], references: [id])
}

model AnilistCover {
  id         Int     @id @default(autoincrement())
  anilistId  Int     @unique
  color      String?
  large      String?
  medium     String?
  extraLarge String?
  anilist    Anilist @relation("AnilistCover", fields: [anilistId], references: [id])
}

model AnilistIndex {
  id        String   @id
  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
}

model AnilistCharacterEdge {
  id          Int     @id
  anilistId   Int
  characterId Int
  role        String?

  anilist   Anilist          @relation("AnilistCharacters", fields: [anilistId], references: [id])
  character AnilistCharacter @relation(fields: [characterId], references: [id])
  voiceActors VoiceActor[]   @relation("CharacterVoiceActors")
}

model AnilistCharacter {
  id Int @id

  name  AnilistCharacterName?  @relation("CharacterName")
  image AnilistCharacterImage? @relation("CharacterImage")

  animeLinks  AnilistCharacterEdge[]
}

model VoiceActor {
  id       Int     @id
  language String?

  name  AnilistVoiceName?  @relation("VoiceActorName")
  image AnilistVoiceImage? @relation("VoiceActorImage")

  characters AnilistCharacterEdge[] @relation("CharacterVoiceActors")
}

model AnilistCharacterName {
  id          Int      @id @default(autoincrement())
  full        String?
  native      String?
  alternative String[]

  character   AnilistCharacter? @relation("CharacterName", fields: [characterId], references: [id])
  characterId Int?              @unique
}

model AnilistCharacterImage {
  id     Int     @id @default(autoincrement())
  large  String?
  medium String?

  character   AnilistCharacter? @relation("CharacterImage", fields: [characterId], references: [id])
  characterId Int?              @unique
}

model AnilistVoiceName {
  id          Int      @id @default(autoincrement())
  full        String?
  native      String?
  alternative String[]

  voiceActor   VoiceActor? @relation("VoiceActorName", fields: [voiceActorId], references: [id])
  voiceActorId Int?        @unique
}

model AnilistVoiceImage {
  id     Int     @id @default(autoincrement())
  large  String?
  medium String?

  voiceActor   VoiceActor? @relation("VoiceActorImage", fields: [voiceActorId], references: [id])
  voiceActorId Int?        @unique
}

model AnilistTag {
  id               Int      @id
  anilistId        Int
  name             String?  @unique
  description      String?
  category         String?
  rank             Int?
  isSpoiler        Boolean?
  isAdult          Boolean?

  anilist Anilist @relation("AnilistTags", fields: [anilistId], references: [id])
}

model AnilistExternalLink {
  id         Int      @id
  anilistId  Int
  url        String?
  site       String?
  siteId     Int?
  type       String?
  language   String?
  color      String?
  icon       String?
  notes      String?
  isDisabled Boolean?

  anilist Anilist @relation("AnilistExternalLinks", fields: [anilistId], references: [id])
}

model AnilistStreamingEpisode {
  id        Int     @id @default(autoincrement())
  anilistId Int
  title     String?
  thumbnail String?
  url       String?
  site      String?

  anilist Anilist @relation("AnilistStreamingEpisodes", fields: [anilistId], references: [id])
}

model AnilistStudioEdge {
  id        Int      @id
  anilistId Int
  studioId  Int
  isMain    Boolean?

  anilist Anilist       @relation("AnilistStudios", fields: [anilistId], references: [id])
  studio  AnilistStudio @relation(fields: [studioId], references: [id])
}

model AnilistStudio {
  id   Int     @id
  name String?

  animeLinks AnilistStudioEdge[]
}

model AnilistAiringSchedule {
  id              Int  @id
  anilistId       Int
  episode         Int?
  airingAt        Int?
  timeUntilAiring Int?

  anilist Anilist @relation("AnilistAiringSchedules", fields: [anilistId], references: [id])
}

model AnilistNextAiringEpisode {
  id              Int  @id
  anilistId       Int  @unique
  episode         Int?
  airingAt        Int?
  timeUntilAiring Int?

  anilist Anilist @relation("AnilistNextAiringEpisode", fields: [anilistId], references: [id])
}

model AnilistRanking {
  id        Int      @id
  anilistId Int
  rank      Int?
  type      String?
  format    String?
  year      Int?
  season    String?
  allTime   Boolean?
  context   String

  anilist Anilist @relation("AnilistRanking", fields: [anilistId], references: [id])
}

model AnilistTrailer {
  id        String  @id @default(uuid())
  anilistId Int     @unique
  site      String?
  thumbnail String?

  anilist Anilist @relation("AnilistTrailer", fields: [anilistId], references: [id])
}

model AnilistScoreDistribution {
  id        Int     @id @default(autoincrement())
  score     Int
  amount    Int
  anilistId Int
  anilist   Anilist @relation("AnilistScoreDistribution", fields: [anilistId], references: [id])
}

model AnilistStatusDistribution {
  id        Int     @id @default(autoincrement())
  status    String
  amount    Int
  anilistId Int
  anilist   Anilist @relation("AnilistStatusDistribution", fields: [anilistId], references: [id])
}

model BasicIdAni {
  id    Int  @id
  idMal Int?

  Anilist Anilist[] @relation("AnilistRecs")
}

// New models for promotional videos
model AnilistPromoVideo {
  anilistId   Int
  title       String?
  youtubeId   String  @id @unique
  url         String?
  embedUrl    String?
  
  // Video images
  images      AnilistVideoImages?
  
  anilist     Anilist  @relation("AnilistPromoVideos", fields: [anilistId], references: [id])
}

model AnilistMusicVideo {
  anilistId   Int
  title       String?
  youtubeId   String  @id @unique
  url         String?
  embedUrl    String?
  
  // Video images
  images      AnilistVideoImages?
  
  // Metadata
  meta        AnilistVideoMeta?
  
  anilist     Anilist  @relation("AnilistMusicVideos", fields: [anilistId], references: [id])
}

model AnilistVideoImages {
  id              Int     @id @default(autoincrement())
  imageUrl        String?
  smallImageUrl   String?
  mediumImageUrl  String?
  largeImageUrl   String?
  maximumImageUrl String?
  
  // Relations to parent videos
  promoVideo      AnilistPromoVideo? @relation(fields: [promoVideoYoutubeId], references: [youtubeId])
  promoVideoYoutubeId  String?      @unique
  
  musicVideo      AnilistMusicVideo? @relation(fields: [musicVideoYoutubeId], references: [youtubeId]) 
  musicVideoYoutubeId  String?      @unique
}

model AnilistVideoMeta {
  id          Int     @id @default(autoincrement())
  title       String?
  author      String?
  
  // Relation to parent music video
  musicVideo   AnilistMusicVideo @relation(fields: [musicVideoYoutubeId], references: [youtubeId])
  musicVideoYoutubeId String    @unique
}

// Model for Jikan Episodes
model AnilistJikanEpisode {
  id          Int      @id @default(autoincrement())
  anilistId   Int
  malId       Int?
  url         String?
  title       String?
  episode     String?
  imageUrl    String?
  
  anilist     Anilist  @relation("AnilistJikanEpisodes", fields: [anilistId], references: [id])
}

// Animekai.prisma
model AnimeKai {
  id             String        @id
  anilistId      Int?
  title          String?
  japaneseTitle  String?
  image          String?
  description    String?       // @Lob just means long text, handled by String
  type           String?
  url            String?
  subOrDub       String?
  hasSub         Boolean?
  hasDub         Boolean?
  status         String?
  season         String?
  totalEpisodes  Int?

  episodes       AnimekaiEpisode[] @relation("AnimekaiEpisode")
}

model AnimekaiEpisode {
  id         String   @id
  number     Int?
  title      String?
  isFiller   Boolean?
  isSubbed   Boolean?
  isDubbed   Boolean?
  url        String?

  animekai AnimeKai[] @relation("AnimekaiEpisode")
}

// Animepahe.prisma
model Animepahe {
  id             String              @id
  alId           Int?
  title          String?
  image          String?
  cover          String?
  hasSub         Boolean?
  externalLinks  AnimepaheExternalLink[] @relation("AnimepaheExLink")
  status         String?
  type           String?
  releaseDate    String?
  totalEpisodes  Int?
  episodePages   Int?

  episodes       AnimepaheEpisode[] @relation("AnimepaheEpisode")
}

model AnimepaheEpisode {
  id          String   @id
  number      Int?
  title       String?
  image       String?
  duration    String?
  url         String?

  animepahe Animepahe[] @relation("AnimepaheEpisode")
}

model AnimepaheExternalLink {
  id          String   @id
  url         String
  sourceName  String

  animepahe Animepahe[] @relation("AnimepaheExLink")
}

// Exception.prisma
model Exception {
  id              Int      @id @default(autoincrement())
  date            DateTime @default(now())
  statusCode      Int?
  timestamp       String?
  path            String?
  method          String?
  message         String?
  file            String?
  line            String?
  stack           String?
  headers         String?
}

// LastUpdated.prisma
model LastUpdated {
  id        Int   @id @default(autoincrement())
  entityId  String
  externalId Int?
  type      String
  createdAt DateTime @default(now())
}

// Shikimori.prisma
model Shikimori {
  id            String        @id
  malId         String?
  name          String?
  russian       String?
  licenseNameRu String?
  english       String?
  japanese      String?
  poster        ShikimoriPoster? @relation("ShikimoriPoster")
  synonyms      String[]
  kind          String?
  rating        String?
  score         Float?
  status        String?
  episodes      Int?
  episodesAired Int?
  duration      Int?
  airedOn       AiredOn? @relation("ShikimoriAiredOn")
  releasedOn    ReleasedOn? @relation("ShikimoriReleasedOn")
  franchise     String?
  url           String?
  season        String?
  createdAt     DateTime?
  updatedAt     DateTime?
  nextEpisodeAt DateTime?
  chronology    BasicIdShik[] @relation("ShikimoriChronology")
  videos        ShikimoriVideo[] @relation("ShikimoriVideo")
  screenshots   ShikimoriScreenshot[] @relation("ShikimoriScreenshot")
}

model AiredOn {
  id        Int         @id @default(autoincrement())
  shikimoriId String @unique

  year      Int?
  month     Int?
  day       Int?
  date      String?

  shikimori Shikimori @relation("ShikimoriAiredOn", fields: [shikimoriId], references: [id])
}

model ReleasedOn {
  id        Int         @id @default(autoincrement())
  shikimoriId String @unique

  year      Int?
  month     Int?
  day       Int?
  date      String?

  shikimori Shikimori @relation("ShikimoriReleasedOn", fields: [shikimoriId], references: [id])
}

model BasicIdShik {
  id          String        @id
  malId       String?

  shikimori Shikimori[] @relation("ShikimoriChronology")
}

model ShikimoriVideo {
  id            String        @id
  url           String?
  name          String?
  kind          String?
  playerUrl     String?
  imageUrl      String?

  shikimori Shikimori[] @relation("ShikimoriVideo")
}

model ShikimoriScreenshot {
  id          String        @id
  originalUrl String?
  x166Url     String?
  x332Url     String?

  shikimori Shikimori[] @relation("ShikimoriScreenshot")
}

model Title {
  id           Int                     @id @default(autoincrement())
  romaji       String?
  english      String?
  native       String?
}

model DateDetails {
  id           Int                     @id @default(autoincrement())
  year         Int?
  month        Int?
  day          Int?
}

model ShikimoriPoster {
  id             String              @id
  shikimoriId    String @unique

  originalUrl    String?
  mainUrl        String?

  shikimori Shikimori @relation("ShikimoriPoster", fields: [shikimoriId], references: [id])
}

model ReleaseIndex {
  id        String   @id
  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// Tmdb.prisma
model Tmdb {
  id                 Int      @id
  adult              Boolean
  backdrop_path      String?  // full URL constructed on getter in Java, handle that in your app logic
  episode_run_time   Int[]    // list of integers
  media_type         String?
  first_air_date     String?
  homepage           String?
  in_production      Boolean?
  last_air_date      String?
  name               String?
  number_of_episodes Int?
  number_of_seasons  Int?
  original_language  String?
  original_name      String?
  origin_country     String[] // list of countries
  overview           String?  // @Lob in Java
  popularity         Float?
  poster_path        String?  // handle URL concatenation in your app logic
  tagline            String?  // @Lob in Java
  status             String?
  type               String?
  vote_average       Float?
  vote_count         Int?

  seasons            TmdbReleaseSeason[] @relation("TmdbReleaseSeason")
}

model TmdbReleaseSeason {
  id            Int     @id
  air_date      String?
  episode_count Int?
  name          String?
  overview      String? // @Lob
  poster_path   String? // handle URL concatenation in your app logic
  season_number Int?
  vote_average  Float?

  tmdb Tmdb[] @relation("TmdbReleaseSeason")
}

model TmdbSeason {
  id            Int      @id
  air_date      String?
  show_id       Int?     // although marked with @JsonIgnore, we keep it if you need it
  name          String?
  overview      String?  // @Lob
  poster_path   String?  // handle URL concatenation in your app logic
  season_number Int?
  vote_average  Float?

  episodes      TmdbSeasonEpisode[] @relation("TmdbSeasonEpisode")
}

model TmdbSeasonEpisode {
  id             Int     @id
  air_date       String?
  episode_number Int?
  episode_type   String?
  name           String?
  overview       String? // @Lob
  production_code String?
  runtime        Int?
  season_number  Int?
  show_id        Int?
  still_path     String? // handle URL concatenation in your app logic
  vote_average   Float?
  vote_count     Int?

  tmdbSeason TmdbSeason[] @relation("TmdbSeasonEpisode")
}

// Tvdb.prisma
model Tvdb {
  id                   Int                @id
  tmdbId               Int?
  type                 String?
  name                 String?
  slug                 String?
  image                String?
  score                Int?
  runtime              Int?
  lastUpdated          String?
  year                 String?
  nameTranslations     String[]
  overviewTranslations String[]
  status               TvdbStatus? @relation("TvdbStatus")

  aliases              TvdbAlias[] @relation("TvdbAliases")
  artworks             TvdbArtwork[] @relation("TvdbArtworks")
  remoteIds            TvdbRemoteId[] @relation("TvdbRemote")
  trailers             TvdbTrailer[] @relation("TvdbTrailers")

  airsDays             TvdbAirDays? @relation("TvdbAirDays")
  airsTime             String?
}

model TvdbStatus {
  id    Int @id
  tvdbId Int @unique

  name  String?
  recordType String?
  keepUpdated Boolean?

  tvdb Tvdb @relation("TvdbStatus", fields: [tvdbId], references: [id])
}

model TvdbAlias {
  id            Int         @id @default(autoincrement())
  name          String?
  language      String?
  
  tvdb Tvdb[] @relation("TvdbAliases")
  @@map("tvdb_aliases")
}

model TvdbArtwork {
  id            Int         @id
  height        Int?
  image         String?
  includesText  Boolean?
  language      String?
  score         Int?
  thumbnail     String?
  type          Int?
  width         Int?

  tvdb Tvdb[] @relation("TvdbArtworks")
  @@map("tvdb_artworks")
}

model TvdbRemoteId {
  id            String      @id
  type          Int?
  sourceName    String?
 
  tvdb Tvdb[] @relation("TvdbRemote")
  @@map("tvdb_remote")
}

model TvdbTrailer {
  id  Int @id
  url String?
  name String?
  runtime Int?
  language String?

  tvdb Tvdb[] @relation("TvdbTrailers")
}

model TvdbAirDays {
  id        Int     @id @default(autoincrement())
  tvdbId    Int @unique

  monday    Boolean @default(false)
  tuesday   Boolean @default(false)
  wednesday Boolean @default(false)
  thursday  Boolean @default(false)
  friday    Boolean @default(false)
  saturday  Boolean @default(false)
  sunday    Boolean @default(false)

  tvdb Tvdb @relation("TvdbAirDays", fields: [tvdbId], references: [id])
}

model TvdbLogin {
  id         Int      @id @default(autoincrement())
  token      String   
  createDate DateTime @default(now())
  expired    Boolean  @default(false)
}

model TvdbLanguageTranslation {
  id         Int      @id @default(autoincrement())
  tvdbId     Int
  name       String?
  overview   String?
  isAlias    Boolean?
  isPrimary  Boolean?
  language   String?
  tagline    String?
  aliases    String[]
}

model TvdbLanguage {
  id         String      @id
  name       String?
  nativeName String?
  shortCode  String?
}

// Zoro.prisma
model Zoro {
  id            String        @id
  title         String?
  malID         Int?
  alID          Int?
  japaneseTitle String?
  image         String?
  description   String?
  type          String?
  url           String?
  subOrDub      String?
  hasSub        Boolean?
  hasDub        Boolean?
  status        String?
  season        String?
  totalEpisodes Int?
  episodes      EpisodeZoro[] @relation("EpisodeZoro")
}

model EpisodeZoro {
  id       String  @id
  number   Int?
  title    String?
  isFiller Boolean?
  isSubbed Boolean?
  isDubbed Boolean?
  url      String?

  zoro Zoro[] @relation("EpisodeZoro")
}
