generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Animepahe.prisma
model Animepahe {
  id             String              @id
  alId           Int?                @unique 
  title          String?
  image          String?
  cover          String?
  updatedAt DateTime @default(now()) @updatedAt
  hasSub         Boolean?
  externalLinks  AnimepaheExternalLink[] @relation("AnimepaheExLink")
  status         String?
  type           String?
  releaseDate    String?
  totalEpisodes  Int?
  episodePages   Int?

  episodes       AnimepaheEpisode[] @relation("AnimepaheEpisode")

  anilist Anilist? @relation(fields: [alId], references: [id])
}

model AnimepaheEpisode {
  id          String   @id
  number      Int?
  title       String?
  image       String?
  duration    String?
  url         String?

  animepahe Animepahe[] @relation("AnimepaheEpisode")
}

model AnimepaheExternalLink {
  id          String   @id
  url         String
  sourceName  String

  animepahe Animepahe[] @relation("AnimepaheExLink")
}

// Shikimori.prisma
model Shikimori {
  id            String        @id
  malId         Int?          @unique
  name          String?
  russian       String?
  licenseNameRu String?
  english       String?
  japanese      String?
  poster        ShikimoriPoster? @relation("ShikimoriPoster")
  synonyms      String[]
  kind          String?
  rating        String?
  score         Float?
  status        String?
  episodes      Int?
  episodesAired Int?
  duration      Int?
  airedOn       AiredOn? @relation("ShikimoriAiredOn")
  releasedOn    ReleasedOn? @relation("ShikimoriReleasedOn")
  franchise     String?
  url           String?
  season        String?
  createdAt     DateTime?
  updatedAt     DateTime?
  nextEpisodeAt DateTime?
  chronology    BasicIdShik[] @relation("ShikimoriChronology")
  videos        ShikimoriVideo[] @relation("ShikimoriVideo")
  screenshots   ShikimoriScreenshot[] @relation("ShikimoriScreenshot")
  anilist       Anilist? @relation(fields: [malId], references: [idMal])
}

model AiredOn {
  id        Int         @id @default(autoincrement())
  shikimoriId String @unique

  year      Int?
  month     Int?
  day       Int?
  date      String?

  shikimori Shikimori @relation("ShikimoriAiredOn", fields: [shikimoriId], references: [id])
}

model ReleasedOn {
  id        Int         @id @default(autoincrement())
  shikimoriId String @unique

  year      Int?
  month     Int?
  day       Int?
  date      String?

  shikimori Shikimori @relation("ShikimoriReleasedOn", fields: [shikimoriId], references: [id])
}

model BasicIdShik {
  id          String        @id
  malId       String?

  shikimori Shikimori[] @relation("ShikimoriChronology")
}

model ShikimoriVideo {
  id            String        @id
  url           String?
  name          String?
  kind          String?
  playerUrl     String?
  imageUrl      String?

  shikimori Shikimori[] @relation("ShikimoriVideo")
}

model ShikimoriScreenshot {
  id          String        @id
  originalUrl String?
  x166Url     String?
  x332Url     String?

  shikimori Shikimori[] @relation("ShikimoriScreenshot")
}

model Title {
  id           Int                     @id @default(autoincrement())
  romaji       String?
  english      String?
  native       String?
}

model DateDetails {
  id           Int                     @id @default(autoincrement())
  year         Int?
  month        Int?
  day          Int?
}

model ShikimoriPoster {
  id             String              @id
  shikimoriId    String @unique

  originalUrl    String?
  mainUrl        String?

  shikimori Shikimori @relation("ShikimoriPoster", fields: [shikimoriId], references: [id])
}

model ReleaseIndex {
  id        String   @id
  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// Tmdb.prisma
model Tmdb {
  id                 Int      @id
  adult              Boolean
  backdrop_path      String?
  episode_run_time   Int[]
  media_type         String?
  first_air_date     String?
  homepage           String?
  in_production      Boolean?
  last_air_date      String?
  name               String?
  number_of_episodes Int?
  number_of_seasons  Int?
  original_language  String?
  original_name      String?
  origin_country     String[]
  overview           String?
  popularity         Float?
  poster_path        String?
  tagline            String?
  status             String?
  type               String?
  vote_average       Float?
  vote_count         Int?

  next_episode_to_air TmdbNextEpisodeToAir? @relation("NextEpisode")
  last_episode_to_air TmdbLastEpisodeToAir? @relation("LastEpisode")
  seasons            TmdbReleaseSeason[] @relation("TmdbReleaseSeason")
}

// Add new model for episode info
model TmdbNextEpisodeToAir {
  id              Int      @id
  name            String?
  overview        String?  // @Lob
  vote_average    Float?
  vote_count      Int?
  air_date        String?
  episode_number  Int?
  episode_type    String?
  production_code String?
  runtime         Int?
  season_number   Int?
  show_id         Int? @unique
  still_path      String?

  tmdb_next       Tmdb? @relation("NextEpisode", fields: [show_id], references: [id])

  @@index([show_id])
}

model TmdbLastEpisodeToAir {
  id              Int      @id
  name            String?
  overview        String?  // @Lob
  vote_average    Float?
  vote_count      Int?
  air_date        String?
  episode_number  Int?
  episode_type    String?
  production_code String?
  runtime         Int?
  season_number   Int?
  show_id         Int? @unique
  still_path      String?

  tmdb_last       Tmdb? @relation("LastEpisode", fields: [show_id], references: [id])

  @@index([show_id])
}

model TmdbReleaseSeason {
  id            Int     @id
  air_date      String?
  episode_count Int?
  name          String?
  overview      String? // @Lob
  poster_path   String? // handle URL concatenation in your app logic
  season_number Int?
  vote_average  Float?

  tmdb Tmdb[] @relation("TmdbReleaseSeason")
}

model TmdbSeason {
  id            Int      @id
  air_date      String?
  show_id       Int?     // although marked with @JsonIgnore, we keep it if you need it
  name          String?
  overview      String?  // @Lob
  poster_path   String?  // handle URL concatenation in your app logic
  season_number Int?
  vote_average  Float?

  episodes      TmdbSeasonEpisode[] @relation("TmdbSeasonEpisode")
}

model TmdbSeasonEpisode {
  id             Int     @id
  air_date       String?
  episode_number Int?
  episode_type   String?
  name           String?
  overview       String? // @Lob
  production_code String?
  runtime        Int?
  season_number  Int?
  show_id        Int?
  still_path     String? // handle URL concatenation in your app logic
  vote_average   Float?
  vote_count     Int?

  tmdbSeason TmdbSeason[] @relation("TmdbSeasonEpisode")
}

// LastUpdated.prisma
model LastUpdated {
  entityId  String   @id @unique
  externalId Int?
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}


// Anilist.prisma
model Anilist {
  id              Int           @id
  idMal           Int?          @unique
  title           AnilistTitle? @relation("AnilistTitle")
  bannerImage     String?
  status          String?
  type            String?
  format          String?
  coverImage      AnilistCover? @relation("AnilistCover")
  updatedAt       Int?
  description     String?
  startDate       StartDate?    @relation("AnilistStartDate")
  endDate         EndDate?      @relation("AnilistEndDate")
  season          String?
  seasonYear      Int?
  episodes        Int?
  duration        Int?
  countryOfOrigin String?
  isLicensed      Boolean?
  source          String?
  hashtag         String?
  isLocked        Boolean?
  isAdult         Boolean?
  averageScore    Int?
  meanScore       Int?
  score           Int?
  popularity      Int?
  trending        Int?
  favourites      Int?
  genres          String[]
  synonyms        String[]

  trailer           AnilistTrailer?           @relation("AnilistTrailer")

  // Normalized collections
  recommendations    BasicIdAni[]                @relation("AnilistRecs")
  characters         AnilistCharacterEdge[]      @relation("AnilistCharacters")
  studios            AnilistStudioEdge[]         @relation("AnilistStudios")
  airingSchedule     AnilistAiringSchedule[]     @relation("AnilistAiringSchedules")
  tags               AnilistTag[]                @relation("AnilistTags")
  rankings           AnilistRanking[]            @relation("AnilistRanking")
  externalLinks      AnilistExternalLink[]       @relation("AnilistExternalLinks")
  streamingEpisodes  AnilistStreamingEpisode[]   @relation("AnilistStreamingEpisodes")
  scoreDistribution  AnilistScoreDistribution[]  @relation("AnilistScoreDistribution")
  statusDistribution AnilistStatusDistribution[] @relation("AnilistStatusDistribution")

  animepahe          Animepahe?
  animekai           AnimeKai?
  zoro               Zoro?
  shikimori          Shikimori?
  kitsu              Kitsu?
}

model AnilistTitle {
  id        Int     @id @default(autoincrement())
  anilistId Int     @unique
  romaji    String?
  english   String?
  native    String?
  anilist   Anilist @relation("AnilistTitle", fields: [anilistId], references: [id])
}

model StartDate {
  id        Int     @id @default(autoincrement())
  anilistId Int     @unique
  day       Int?
  month     Int?
  year      Int?
  anilist   Anilist @relation("AnilistStartDate", fields: [anilistId], references: [id])
}

model EndDate {
  id        Int     @id @default(autoincrement())
  anilistId Int     @unique
  day       Int?
  month     Int?
  year      Int?
  anilist   Anilist @relation("AnilistEndDate", fields: [anilistId], references: [id])
}

model AnilistCover {
  id         Int     @id @default(autoincrement())
  anilistId  Int     @unique
  color      String?
  large      String?
  medium     String?
  extraLarge String?
  anilist    Anilist @relation("AnilistCover", fields: [anilistId], references: [id])
}

model AnilistIndex {
  id        String   @id
  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
}

model AnilistCharacterEdge {
  id          Int     @id
  anilistId   Int
  characterId Int
  role        String?

  anilist   Anilist          @relation("AnilistCharacters", fields: [anilistId], references: [id])
  character AnilistCharacter @relation(fields: [characterId], references: [id])
  voiceActors VoiceActor[]   @relation("CharacterVoiceActors")
}

model AnilistCharacter {
  id Int @id

  name  AnilistCharacterName?  @relation("CharacterName")
  image AnilistCharacterImage? @relation("CharacterImage")

  animeLinks  AnilistCharacterEdge[]
}

model VoiceActor {
  id       Int     @id
  language String?

  name  AnilistVoiceName?  @relation("VoiceActorName")
  image AnilistVoiceImage? @relation("VoiceActorImage")

  characters AnilistCharacterEdge[] @relation("CharacterVoiceActors")
}

model AnilistCharacterName {
  id          Int      @id @default(autoincrement())
  full        String?
  native      String?
  alternative String[]

  character   AnilistCharacter? @relation("CharacterName", fields: [characterId], references: [id])
  characterId Int?              @unique
}

model AnilistCharacterImage {
  id     Int     @id @default(autoincrement())
  large  String?
  medium String?

  character   AnilistCharacter? @relation("CharacterImage", fields: [characterId], references: [id])
  characterId Int?              @unique
}

model AnilistVoiceName {
  id          Int      @id @default(autoincrement())
  full        String?
  native      String?
  alternative String[]

  voiceActor   VoiceActor? @relation("VoiceActorName", fields: [voiceActorId], references: [id])
  voiceActorId Int?        @unique
}

model AnilistVoiceImage {
  id     Int     @id @default(autoincrement())
  large  String?
  medium String?

  voiceActor   VoiceActor? @relation("VoiceActorImage", fields: [voiceActorId], references: [id])
  voiceActorId Int?        @unique
}

model AnilistTag {
  id               Int      @id
  anilistId        Int
  name             String?  @unique
  description      String?
  category         String?
  rank             Int?
  isSpoiler        Boolean?
  isAdult          Boolean?

  anilist Anilist @relation("AnilistTags", fields: [anilistId], references: [id])
}

model AnilistExternalLink {
  id         Int      @id
  anilistId  Int
  url        String?
  site       String?
  siteId     Int?
  type       String?
  language   String?
  color      String?
  icon       String?
  notes      String?
  isDisabled Boolean?

  anilist Anilist @relation("AnilistExternalLinks", fields: [anilistId], references: [id])
}

model AnilistStreamingEpisode {
  id        Int     @id @default(autoincrement())
  anilistId Int
  title     String?
  thumbnail String?
  url       String?
  site      String?

  anilist Anilist @relation("AnilistStreamingEpisodes", fields: [anilistId], references: [id])
}

model AnilistStudioEdge {
  id        Int      @id
  anilistId Int
  studioId  Int
  isMain    Boolean?

  anilist Anilist       @relation("AnilistStudios", fields: [anilistId], references: [id])
  studio  AnilistStudio @relation(fields: [studioId], references: [id])
}

model AnilistStudio {
  id   Int     @id
  name String?

  animeLinks AnilistStudioEdge[]
}

model AnilistAiringSchedule {
  id              Int  @id
  anilistId       Int
  episode         Int?
  airingAt        Int?

  anilist Anilist @relation("AnilistAiringSchedules", fields: [anilistId], references: [id])
}

model AnilistRanking {
  id        Int      @id
  anilistId Int
  rank      Int?
  type      String?
  format    String?
  year      Int?
  season    String?
  allTime   Boolean?
  context   String

  anilist Anilist @relation("AnilistRanking", fields: [anilistId], references: [id])
}

model AnilistTrailer {
  id        String  @id @default(uuid())
  anilistId Int     @unique
  site      String?
  thumbnail String?

  anilist Anilist @relation("AnilistTrailer", fields: [anilistId], references: [id])
}

model AnilistScoreDistribution {
  id        Int     @id @default(autoincrement())
  score     Int
  amount    Int
  anilistId Int
  anilist   Anilist @relation("AnilistScoreDistribution", fields: [anilistId], references: [id])
}

model AnilistStatusDistribution {
  id        Int     @id @default(autoincrement())
  status    String
  amount    Int
  anilistId Int
  anilist   Anilist @relation("AnilistStatusDistribution", fields: [anilistId], references: [id])
}

model BasicIdAni {
  id    Int  @id
  idMal Int?

  Anilist Anilist[] @relation("AnilistRecs")
}

// Indexer.prisma
model AnilistIndexerState {
  id               String   @id @default("anime")
  lastFetchedPage  Int
  updatedAt        DateTime @updatedAt
}

// Exception.prisma
model Exception {
  id              Int      @id @default(autoincrement())
  date            DateTime @default(now())
  statusCode      Int?
  timestamp       String?
  path            String?
  method          String?
  message         String?
  file            String?
  line            String?
  stack           String?
  headers         String?
}

// Animekai.prisma
model AnimeKai {
  id             String        @id
  anilistId      Int?          @unique
  title          String?
  japaneseTitle  String?
  image          String?
  description    String?
  type           String?
  url            String?
  updatedAt DateTime @default(now()) @updatedAt
  subOrDub       String?
  hasSub         Boolean?
  hasDub         Boolean?
  status         String?
  season         String?
  totalEpisodes  Int?

  episodes       AnimekaiEpisode[] @relation("AnimekaiEpisode")

  anilist Anilist? @relation(fields: [anilistId], references: [id])
}

model AnimekaiEpisode {
  id         String   @id
  number     Int?
  title      String?
  isFiller   Boolean?
  isSubbed   Boolean?
  isDubbed   Boolean?
  url        String?

  animekai AnimeKai[] @relation("AnimekaiEpisode")
}

// Kitsu.prisma
model Kitsu {
  // Base Fields
  id                  String      @id
  anilistId           Int?        @unique
  type                String?
  selfLink            String?     @map("self_link")

  // Attributes
  createdAt           DateTime?   @map("created_at")
  updatedAt           DateTime?   @map("updated_at")
  slug                String?     @map("slug")
  synopsis            String?     @map("synopsis")
  coverImageTopOffset Int?        @map("cover_image_top_offset")
  canonicalTitle      String?     @map("canonical_title")
  abbreviatedTitles   String[]    @map("abbreviated_titles")
  averageRating       String?     @map("average_rating")
  ratingFrequencies   Json?       @map("rating_frequencies")
  userCount           Int?        @map("user_count")
  favoritesCount      Int?        @map("favorites_count")
  startDate           DateTime?   @map("start_date")
  endDate             DateTime?   @map("end_date")
  popularityRank      Int?        @map("popularity_rank")
  ratingRank          Int?        @map("rating_rank")
  ageRating           String?     @map("age_rating")
  ageRatingGuide      String?     @map("age_rating_guide")
  subtype             String?
  status              String?
  tba                 String?
  episodeCount        Int?        @map("episode_count")
  episodeLength       Int?        @map("episode_length")
  youtubeVideoId      String?     @map("youtube_video_id")
  showType            String?     @map("show_type")
  nsfw                Boolean     @default(false)

  // One-to-One Relations
  titles              KitsuTitle?
  posterImage         KitsuPosterImage?  @relation("PosterImage")
  coverImage          KitsuCoverImage?   @relation("CoverImage")
  genres              KitsuGenres?
  categories          KitsuCategories?
  castings            KitsuCastings?
  installments        KitsuInstallments?
  mappings            KitsuMappings?
  reviews             KitsuReviews?
  mediaRelationships  KitsuMediaRelationships?
  episodes            KitsuEpisodes?
  streamingLinks      KitsuStreamingLinks?
  animeProductions    KitsuAnimeProductions?
  animeCharacters     KitsuAnimeCharacters?
  animeStaff          KitsuAnimeStaff?

  anilist             Anilist?    @relation(fields: [anilistId], references: [id])
}

model KitsuTitle {
  id                  String    @id @default(cuid())
  en                  String?
  en_jp               String?
  ja_jp               String?

  kitsuId             String    @unique
  kitsu               Kitsu     @relation(fields: [kitsuId], references: [id])
}

model KitsuPosterImage {
  id                  String    @id @default(cuid())
  tiny                String?
  small               String?
  medium              String?
  large               String?
  original            String?
  dimensions          KitsuImageDimensions?

  kitsuId             String    @unique
  kitsu               Kitsu     @relation("PosterImage", fields: [kitsuId], references: [id])
}

model KitsuCoverImage {
  id                  String    @id @default(cuid())
  tiny                String?
  small               String?
  large               String?
  original            String?
  dimensions          KitsuImageDimensions?

  kitsuId             String    @unique
  kitsu               Kitsu     @relation("CoverImage", fields: [kitsuId], references: [id])
}

model KitsuImageDimensions {
  id                  String    @id @default(cuid())
  tiny                KitsuDimension? @relation("TinyDimension")
  small               KitsuDimension? @relation("SmallDimension")
  medium              KitsuDimension? @relation("MediumDimension")
  large               KitsuDimension? @relation("LargeDimension")

  posterImageId       String?   @unique
  coverImageId        String?   @unique
  posterImage         KitsuPosterImage? @relation(fields: [posterImageId], references: [id])
  coverImage          KitsuCoverImage?  @relation(fields: [coverImageId], references: [id])
}

model KitsuDimension {
  id                  String    @id @default(cuid())
  width               Int?
  height              Int?

  tinyDimensionId     String?   @unique
  smallDimensionId    String?   @unique
  mediumDimensionId   String?   @unique
  largeDimensionId    String?   @unique

  tinyDimension       KitsuImageDimensions?  @relation("TinyDimension", fields: [tinyDimensionId], references: [id])
  smallDimension      KitsuImageDimensions?  @relation("SmallDimension", fields: [smallDimensionId], references: [id])
  mediumDimension     KitsuImageDimensions?  @relation("MediumDimension", fields: [mediumDimensionId], references: [id])
  largeDimension      KitsuImageDimensions?  @relation("LargeDimension", fields: [largeDimensionId], references: [id])
}

model KitsuGenres {
  id        String  @id @default(cuid())
  selfLink  String
  related   String
  
  kitsuId   String  @unique
  kitsu     Kitsu   @relation(fields: [kitsuId], references: [id])
}

model KitsuCategories {
  id        String  @id @default(cuid())
  selfLink  String
  related   String
  
  kitsuId   String  @unique
  kitsu     Kitsu   @relation(fields: [kitsuId], references: [id])
}

model KitsuCastings {
  id        String  @id @default(cuid())
  selfLink  String
  related   String
  
  kitsuId   String  @unique
  kitsu     Kitsu   @relation(fields: [kitsuId], references: [id])
}

model KitsuInstallments {
  id        String  @id @default(cuid())
  selfLink  String
  related   String
  
  kitsuId   String  @unique
  kitsu     Kitsu   @relation(fields: [kitsuId], references: [id])
}

model KitsuMappings {
  id        String  @id @default(cuid())
  selfLink  String
  related   String
  
  kitsuId   String  @unique
  kitsu     Kitsu   @relation(fields: [kitsuId], references: [id])
}

model KitsuReviews {
  id        String  @id @default(cuid())
  selfLink  String
  related   String
  
  kitsuId   String  @unique
  kitsu     Kitsu   @relation(fields: [kitsuId], references: [id])
}

model KitsuMediaRelationships {
  id        String  @id @default(cuid())
  selfLink  String
  related   String
  
  kitsuId   String  @unique
  kitsu     Kitsu   @relation(fields: [kitsuId], references: [id])
}

model KitsuEpisodes {
  id        String  @id @default(cuid())
  selfLink  String
  related   String
  
  kitsuId   String  @unique
  kitsu     Kitsu   @relation(fields: [kitsuId], references: [id])
}

model KitsuStreamingLinks {
  id        String  @id @default(cuid())
  selfLink  String
  related   String
  
  kitsuId   String  @unique
  kitsu     Kitsu   @relation(fields: [kitsuId], references: [id])
}

model KitsuAnimeProductions {
  id        String  @id @default(cuid())
  selfLink  String
  related   String
  
  kitsuId   String  @unique
  kitsu     Kitsu   @relation(fields: [kitsuId], references: [id])
}

model KitsuAnimeCharacters {
  id        String  @id @default(cuid())
  selfLink  String
  related   String
  
  kitsuId   String  @unique
  kitsu     Kitsu   @relation(fields: [kitsuId], references: [id])
}

model KitsuAnimeStaff {
  id        String  @id @default(cuid())
  selfLink  String
  related   String
  
  kitsuId   String  @unique
  kitsu     Kitsu   @relation(fields: [kitsuId], references: [id])
}

// Zoro.prisma
model Zoro {
  id            String        @id
  title         String?   
  malID         Int? 
  alID          Int?          @unique
  japaneseTitle String?
  image         String?
  description   String?
  type          String?
  url           String?
  updatedAt DateTime @default(now()) @updatedAt
  subOrDub      String?
  hasSub        Boolean?
  hasDub        Boolean?
  status        String?
  season        String?
  totalEpisodes Int?
  episodes      EpisodeZoro[] @relation("EpisodeZoro")

  anilist Anilist? @relation(fields: [alID], references: [id])
}

model EpisodeZoro {
  id       String  @id
  number   Int?
  title    String?
  isFiller Boolean?
  isSubbed Boolean?
  isDubbed Boolean?
  url      String?

  zoro Zoro[] @relation("EpisodeZoro")
}


// Tvdb.prisma
model Tvdb {
  id                   Int                @id
  tmdbId               Int?
  type                 String?
  name                 String?
  slug                 String?
  image                String?
  score                Int?
  runtime              Int?
  lastUpdated          String?
  year                 String?
  nameTranslations     String[]
  overviewTranslations String[]
  status               TvdbStatus? @relation("TvdbStatus")

  aliases              TvdbAlias[] @relation("TvdbAliases")
  artworks             TvdbArtwork[] @relation("TvdbArtworks")
  remoteIds            TvdbRemoteId[] @relation("TvdbRemote")
  trailers             TvdbTrailer[] @relation("TvdbTrailers")

  airsDays             TvdbAirDays? @relation("TvdbAirDays")
  airsTime             String?
}

model TvdbStatus {
  id    Int @id
  tvdbId Int @unique

  name  String?
  recordType String?
  keepUpdated Boolean?

  tvdb Tvdb @relation("TvdbStatus", fields: [tvdbId], references: [id])
}

model TvdbAlias {
  id            Int         @id @default(autoincrement())
  name          String?
  language      String?
  
  tvdb Tvdb[] @relation("TvdbAliases")
  @@map("tvdb_aliases")
}

model TvdbArtwork {
  id            Int         @id
  height        Int?
  image         String?
  includesText  Boolean?
  language      String?
  score         Int?
  thumbnail     String?
  type          Int?
  width         Int?

  tvdb Tvdb[] @relation("TvdbArtworks")
  @@map("tvdb_artworks")
}

model TvdbRemoteId {
  id            String      @id
  type          Int?
  sourceName    String?
 
  tvdb Tvdb[] @relation("TvdbRemote")
  @@map("tvdb_remote")
}

model TvdbTrailer {
  id  Int @id
  url String?
  name String?
  runtime Int?
  language String?

  tvdb Tvdb[] @relation("TvdbTrailers")
}

model TvdbAirDays {
  id        Int     @id @default(autoincrement())
  tvdbId    Int @unique

  monday    Boolean @default(false)
  tuesday   Boolean @default(false)
  wednesday Boolean @default(false)
  thursday  Boolean @default(false)
  friday    Boolean @default(false)
  saturday  Boolean @default(false)
  sunday    Boolean @default(false)

  tvdb Tvdb @relation("TvdbAirDays", fields: [tvdbId], references: [id])
}

model TvdbLogin {
  id         Int      @id @default(autoincrement())
  token      String   
  createDate DateTime @default(now())
  expired    Boolean  @default(false)
}

model TvdbLanguageTranslation {
  id         Int      @id @default(autoincrement())
  tvdbId     Int
  name       String?
  overview   String?
  isAlias    Boolean?
  isPrimary  Boolean?
  language   String?
  tagline    String?
  aliases    String[]
}

model TvdbLanguage {
  id         String      @id
  name       String?
  nativeName String?
  shortCode  String?
}