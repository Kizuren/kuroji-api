generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Anilist.prisma
model Anilist {
  id                Int      @id
  idMal             Int?
  siteUrl           String?
  // Embedded objects stored as JSON
  title             Json? // corresponds to Release.Title
  coverImage        Json? // corresponds to Release.CoverImage
  bannerImage       String?
  status            String?
  type              String?
  format            String?
  updatedAt         Int?
  description       String?
  startDate         Json? // corresponds to Date (with start_year, start_month, start_day)
  endDate           Json? // corresponds to Date (with end_year, end_month, end_day)
  season            String?
  seasonYear        Int?
  episodes          Int?
  duration          Int?
  countryOfOrigin   String?
  isLicensed        Boolean?
  source            String?
  hashtag           String?
  trailer           Json? // corresponds to Trailer
  isLocked          Boolean?
  isAdult           Boolean?
  averageScore      Int?
  meanScore         Int?
  popularity        Int?
  trending          Int?
  favourites        Int?
  genres            String[] // Element collection of strings
  synonyms          String[]
  // Complex embedded collections stored as JSON:
  recommendations   Json? // RecommendationEdgeWrapper<BasicId>
  characters        Json? // CharacterEdgeWrapper
  studios           Json? // StudioEdgeWrapper
  airingSchedule    Json? // AiringEdgeWrapper
  nextAiringEpisode Json? // AiringEpisode
  stats             Json? // Stats (including scoreDistribution and statusDistribution)

  // Normalized collections (stored in separate tables)
  tags              AnilistTag[]
  externalLinks     AnilistExternalLink[]
  streamingEpisodes AnilistStreamingEpisode[]
  BasicIdAni        BasicIdAni[]
}

model AnilistTag {
  id               Int      @id @default(autoincrement())
  releaseId        Int
  tagId            Int?
  name             String?
  description      String?
  category         String?
  rank             Int?
  isGeneralSpoiler Boolean?
  isMediaSpoiler   Boolean?
  isAdult          Boolean?
  userId           Int?
  release          Anilist  @relation(fields: [releaseId], references: [id])
}

model AnilistExternalLink {
  id         Int      @id @default(autoincrement())
  releaseId  Int
  exLinkId   Int?
  url        String?
  site       String?
  siteId     Int?
  type       String?
  language   String?
  color      String?
  icon       String?
  notes      String?
  isDisabled Boolean?
  release    Anilist  @relation(fields: [releaseId], references: [id])
}

model AnilistStreamingEpisode {
  id        Int     @id @default(autoincrement())
  releaseId Int
  title     String?
  thumbnail String?
  url       String?
  site      String?
  release   Anilist @relation(fields: [releaseId], references: [id])
}

model BasicIdAni {
  id        Int      @id @default(autoincrement())
  idMal     Int?
  release   Anilist? @relation(fields: [releaseId], references: [id])
  releaseId Int?
}


// Shikimori.prisma
model Shikimori {
  id            String        @id
  malId         String?
  name          String?
  russian       String?
  licenseNameRu String?
  english       String?
  japanese      String?
  synonyms      String[]
  kind          String?
  rating        String?
  score         Float?
  status        String?
  episodes      Int?
  episodesAired Int?
  duration      Int?
  airedOn       AiredOn?      @relation(fields: [airedOnId], references: [id])
  airedOnId     Int?
  releasedOn    ReleasedOn?   @relation(fields: [releasedOnId], references: [id])
  releasedOnId  Int?
  url           String?
  season        String?
  poster        Poster?       @relation(fields: [posterId], references: [id])
  posterId      Int?
  createdAt     DateTime?
  updatedAt     DateTime?
  nextEpisodeAt DateTime?
  chronology    BasicIdShik[]
  videos        Video[]
  screenshots   Screenshot[]
}

model AiredOn {
  id        Int         @id @default(autoincrement())
  year      Int?
  month     Int?
  day       Int?
  date      String?
  Shikimori Shikimori[]
}

model ReleasedOn {
  id        Int         @id @default(autoincrement())
  year      Int?
  month     Int?
  day       Int?
  date      String?
  Shikimori Shikimori[]
}

model BasicIdShik {
  id          Int        @id @default(autoincrement())
  malId       Int?
  Shikimori   Shikimori? @relation(fields: [shikimoriId], references: [id])
  shikimoriId String?
}

model Video {
  id            Int        @id @default(autoincrement())
  videoId       String?
  videoImageUrl String?
  kind          String?
  videoName     String?
  playerUrl     String?
  videoUrl      String?
  Shikimori     Shikimori? @relation(fields: [shikimoriId], references: [id])
  shikimoriId   String?
}

model Screenshot {
  id          Int        @id @default(autoincrement())
  originalUrl String?
  x166Url     String?
  x332Url     String?
  Shikimori   Shikimori? @relation(fields: [shikimoriId], references: [id])
  shikimoriId String?
}

model BasicReleaseShikimori {
  id                  Int             @id @default(autoincrement())
  idMal               Int?
  siteUrl             String?
  title               Title?          @relation(fields: [titleId], references: [id])
  titleId             Int?
  synonyms            String[]
  bannerImage         String?
  coverImage          CoverImage?     @relation(fields: [coverImageId], references: [id])
  coverImageId        Int?
  type                String?
  format              String?
  status              String?
  description         String?
  startDate           DateDetails?    @relation(fields: [startDateId], references: [id])
  startDateId         Int?
  season              String?
  seasonYear          Int?
  episodes            Int?
  episodesAired       Int?
  duration            Int?
  countryOfOrigin     String?
  popularity          Int?
  favourites          Int?
  averageScore        Int?
  meanScore           Int?
  isLocked            Boolean?
  isAdult             Boolean?
  genres              String[]
  nextAiringEpisode   AiringEpisode?  @relation(fields: [nextAiringEpisodeId], references: [id])
  nextAiringEpisodeId Int?
  shikimori           BasicShikimori? @relation(fields: [shikimoriId], references: [id])
  shikimoriId         Int?
}

model Title {
  id           Int                     @id @default(autoincrement())
  romaji       String?
  english      String?
  native       String?
  BasicRelease BasicReleaseShikimori[]
}

model CoverImage {
  id           Int                     @id @default(autoincrement())
  extraLarge   String?
  large        String?
  medium       String?
  color        String?
  BasicRelease BasicReleaseShikimori[]
}

model DateDetails {
  id           Int                     @id @default(autoincrement())
  year         Int?
  month        Int?
  day          Int?
  BasicRelease BasicReleaseShikimori[]
}

model AiringEpisode {
  id              Int                     @id @default(autoincrement())
  airingAt        Int?
  timeUntilAiring Int?
  episode         Int?
  BasicRelease    BasicReleaseShikimori[]
}

model BasicShikimori {
  id           Int                     @id @default(autoincrement())
  name         String?
  url          String?
  poster       Poster?                 @relation(fields: [posterId], references: [id])
  posterId     Int?
  BasicRelease BasicReleaseShikimori[]
}

model Poster {
  id             Int              @id @default(autoincrement())
  originalUrl    String?
  mainUrl        String?
  BasicShikimori BasicShikimori[]
  Shikimori      Shikimori[]
}

model ReleaseFilter {
  id                  Int      @id @default(autoincrement())
  sort                String[]
  perPage             Int?
  page                Int?
  sourceIn            String[]
  popularityLesser    Int?
  popularityGreater   Int?
  popularityNot       Int?
  averageScoreLesser  Int?
  averageScoreGreater Int?
  averageScoreNot     Int?
  licensedByIdIn      String[]
  licensedByIn        String[]
  tagCategoryNotIn    String[]
  tagCategoryIn       String[]
  tagNotIn            String[]
  tagIn               String[]
  genreNotIn          String[]
  genreIn             String[]
  durationLesser      Int?
  durationGreater     Int?
  episodesLesser      Int?
  episodesGreater     Int?
  statusNotIn         String[]
  statusNot           String?
  statusIn            String[]
  formatNotIn         String[]
  formatNot           String?
  formatIn            String[]
  endDateLike         String?
  endDateLesser       String?
  endDateGreater      String?
  startDateLike       String?
  startDateLesser     String?
  startDateGreater    String?
  idMalNotIn          Int[]
  idMalIn             Int[]
  idMalNot            Int?
  idNotIn             Int[]
  idIn                Int[]
  idNot               Int?
  search              String?
  isLicensed          Boolean?
  countryOfOrigin     String?
  isAdult             Boolean?
  format              String?
  type                String?
  status              String?
  season              String?
  idMal               Int?
}

model ReleaseIndex {
  id        String   @id
  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ids {
  id   Int   @id @default(autoincrement())
  sfw  Int[]
  nsfw Int[]
}

model LastUpdated {
  id        String   @id
  entityId  String
  type      String
  createdAt DateTime @default(now())
}
